<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::size_approx (852 samples, 0.31%)</title><rect x="115.1" y="309" width="3.6" height="15.0" fill="rgb(226,225,24)" rx="2" ry="2" />
<text  x="118.08" y="319.5" ></text>
</g>
<g >
<title>kv::LRUCache::allocate_node (215 samples, 0.08%)</title><rect x="1044.7" y="389" width="0.9" height="15.0" fill="rgb(216,40,31)" rx="2" ry="2" />
<text  x="1047.69" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (2,665 samples, 0.97%)</title><rect x="748.7" y="293" width="11.4" height="15.0" fill="rgb(232,36,5)" rx="2" ry="2" />
<text  x="751.69" y="303.5" ></text>
</g>
<g >
<title>std::atomic&lt;moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase*&gt;::load (35 samples, 0.01%)</title><rect x="203.8" y="325" width="0.1" height="15.0" fill="rgb(226,174,26)" rx="2" ry="2" />
<text  x="206.79" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (32 samples, 0.01%)</title><rect x="1185.6" y="549" width="0.1" height="15.0" fill="rgb(228,191,50)" rx="2" ry="2" />
<text  x="1188.56" y="559.5" ></text>
</g>
<g >
<title>remove_migration_ptes (51 samples, 0.02%)</title><rect x="1011.6" y="245" width="0.2" height="15.0" fill="rgb(251,135,20)" rx="2" ry="2" />
<text  x="1014.63" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_ptr (188 samples, 0.07%)</title><rect x="744.5" y="261" width="0.8" height="15.0" fill="rgb(227,1,26)" rx="2" ry="2" />
<text  x="747.51" y="271.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (26 samples, 0.01%)</title><rect x="1174.8" y="533" width="0.1" height="15.0" fill="rgb(242,55,37)" rx="2" ry="2" />
<text  x="1177.77" y="543.5" ></text>
</g>
<g >
<title>__handle_mm_fault (148 samples, 0.05%)</title><rect x="1169.7" y="341" width="0.7" height="15.0" fill="rgb(248,219,18)" rx="2" ry="2" />
<text  x="1172.71" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (155 samples, 0.06%)</title><rect x="152.6" y="293" width="0.7" height="15.0" fill="rgb(232,183,4)" rx="2" ry="2" />
<text  x="155.63" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (173 samples, 0.06%)</title><rect x="316.4" y="309" width="0.7" height="15.0" fill="rgb(221,203,42)" rx="2" ry="2" />
<text  x="319.38" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (19,234 samples, 7.00%)</title><rect x="374.1" y="293" width="82.6" height="15.0" fill="rgb(250,125,1)" rx="2" ry="2" />
<text  x="377.10" y="303.5" >do_syscal..</text>
</g>
<g >
<title>get_page_from_freelist (58 samples, 0.02%)</title><rect x="1010.8" y="213" width="0.2" height="15.0" fill="rgb(208,88,39)" rx="2" ry="2" />
<text  x="1013.78" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::deallocate (216 samples, 0.08%)</title><rect x="160.8" y="277" width="1.0" height="15.0" fill="rgb(208,86,25)" rx="2" ry="2" />
<text  x="163.82" y="287.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long const, kv::ListNode*&gt; (151 samples, 0.05%)</title><rect x="793.8" y="261" width="0.6" height="15.0" fill="rgb(254,168,54)" rx="2" ry="2" />
<text  x="796.76" y="271.5" ></text>
</g>
<g >
<title>futex_wake (40,186 samples, 14.62%)</title><rect x="518.5" y="245" width="172.6" height="15.0" fill="rgb(217,17,5)" rx="2" ry="2" />
<text  x="521.52" y="255.5" >futex_wake</text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (55,013 samples, 20.02%)</title><rect x="457.0" y="389" width="236.2" height="15.0" fill="rgb(219,156,18)" rx="2" ry="2" />
<text  x="460.01" y="399.5" >std::lock_guard&lt;std::mutex&gt;::~l..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (36 samples, 0.01%)</title><rect x="801.1" y="293" width="0.1" height="15.0" fill="rgb(223,181,42)" rx="2" ry="2" />
<text  x="804.07" y="303.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (2,179 samples, 0.79%)</title><rect x="292.9" y="309" width="9.3" height="15.0" fill="rgb(220,173,29)" rx="2" ry="2" />
<text  x="295.87" y="319.5" ></text>
</g>
<g >
<title>alloc_misplaced_dst_page (59 samples, 0.02%)</title><rect x="1010.8" y="245" width="0.2" height="15.0" fill="rgb(226,157,26)" rx="2" ry="2" />
<text  x="1013.78" y="255.5" ></text>
</g>
<g >
<title>migrate_page (25 samples, 0.01%)</title><rect x="29.8" y="213" width="0.1" height="15.0" fill="rgb(227,101,53)" rx="2" ry="2" />
<text  x="32.84" y="223.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::get_or_add_implicit_producer (100 samples, 0.04%)</title><rect x="120.0" y="293" width="0.4" height="15.0" fill="rgb(209,192,34)" rx="2" ry="2" />
<text  x="123.02" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (51 samples, 0.02%)</title><rect x="1128.0" y="293" width="0.3" height="15.0" fill="rgb(245,153,11)" rx="2" ry="2" />
<text  x="1131.04" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (118 samples, 0.04%)</title><rect x="1183.7" y="565" width="0.5" height="15.0" fill="rgb(209,206,40)" rx="2" ry="2" />
<text  x="1186.67" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_addr (136 samples, 0.05%)</title><rect x="744.7" y="245" width="0.6" height="15.0" fill="rgb(249,125,26)" rx="2" ry="2" />
<text  x="747.73" y="255.5" ></text>
</g>
<g >
<title>__do_page_fault (117 samples, 0.04%)</title><rect x="317.4" y="357" width="0.5" height="15.0" fill="rgb(207,215,13)" rx="2" ry="2" />
<text  x="320.38" y="367.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (26 samples, 0.01%)</title><rect x="1174.8" y="549" width="0.1" height="15.0" fill="rgb(237,17,41)" rx="2" ry="2" />
<text  x="1177.77" y="559.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (456 samples, 0.17%)</title><rect x="298.8" y="293" width="1.9" height="15.0" fill="rgb(234,101,54)" rx="2" ry="2" />
<text  x="301.76" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (77 samples, 0.03%)</title><rect x="760.5" y="293" width="0.4" height="15.0" fill="rgb(223,81,2)" rx="2" ry="2" />
<text  x="763.55" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (402 samples, 0.15%)</title><rect x="808.3" y="341" width="1.8" height="15.0" fill="rgb(212,63,48)" rx="2" ry="2" />
<text  x="811.33" y="351.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.19.35.0] (92 samples, 0.03%)</title><rect x="1171.3" y="549" width="0.4" height="15.0" fill="rgb(254,162,22)" rx="2" ry="2" />
<text  x="1174.31" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, main::{lambda (270,326 samples, 98.37%)</title><rect x="10.1" y="453" width="1160.8" height="15.0" fill="rgb(219,193,54)" rx="2" ry="2" />
<text  x="13.13" y="463.5" >std::__invoke_impl&lt;void, main::{lambda</text>
</g>
<g >
<title>[rdma_client] (65 samples, 0.02%)</title><rect x="1021.8" y="389" width="0.3" height="15.0" fill="rgb(252,88,43)" rx="2" ry="2" />
<text  x="1024.78" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9,837 samples, 3.58%)</title><rect x="719.5" y="341" width="42.3" height="15.0" fill="rgb(241,10,29)" rx="2" ry="2" />
<text  x="722.54" y="351.5" >std..</text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, std::ratio&lt;1l, 1000l&gt;, long, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (205 samples, 0.07%)</title><rect x="1060.3" y="309" width="0.9" height="15.0" fill="rgb(237,155,12)" rx="2" ry="2" />
<text  x="1063.30" y="319.5" ></text>
</g>
<g >
<title>kv::LRUCache::allocate_node (1,399 samples, 0.51%)</title><rect x="172.6" y="389" width="6.0" height="15.0" fill="rgb(206,33,51)" rx="2" ry="2" />
<text  x="175.57" y="399.5" ></text>
</g>
<g >
<title>pthread_spin_lock (92 samples, 0.03%)</title><rect x="1038.4" y="277" width="0.4" height="15.0" fill="rgb(216,167,10)" rx="2" ry="2" />
<text  x="1041.37" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long const&amp;&gt; (62 samples, 0.02%)</title><rect x="809.2" y="277" width="0.2" height="15.0" fill="rgb(224,4,41)" rx="2" ry="2" />
<text  x="812.18" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (71 samples, 0.03%)</title><rect x="1134.6" y="277" width="0.3" height="15.0" fill="rgb(251,75,35)" rx="2" ry="2" />
<text  x="1137.58" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,567 samples, 0.93%)</title><rect x="214.3" y="341" width="11.1" height="15.0" fill="rgb(233,5,41)" rx="2" ry="2" />
<text  x="217.34" y="351.5" ></text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1,674 samples, 0.61%)</title><rect x="282.9" y="325" width="7.2" height="15.0" fill="rgb(245,88,42)" rx="2" ry="2" />
<text  x="285.93" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::_M_node_allocator (200 samples, 0.07%)</title><rect x="160.0" y="277" width="0.8" height="15.0" fill="rgb(232,190,25)" rx="2" ry="2" />
<text  x="162.97" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (491 samples, 0.18%)</title><rect x="151.3" y="341" width="2.1" height="15.0" fill="rgb(228,30,29)" rx="2" ry="2" />
<text  x="154.32" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_free (134 samples, 0.05%)</title><rect x="161.0" y="245" width="0.5" height="15.0" fill="rgb(218,199,10)" rx="2" ry="2" />
<text  x="163.97" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (25 samples, 0.01%)</title><rect x="1064.8" y="293" width="0.1" height="15.0" fill="rgb(231,122,6)" rx="2" ry="2" />
<text  x="1067.79" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long&gt;, true&gt;::_S_cget (118 samples, 0.04%)</title><rect x="803.5" y="325" width="0.5" height="15.0" fill="rgb(230,138,2)" rx="2" ry="2" />
<text  x="806.49" y="335.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (353 samples, 0.13%)</title><rect x="300.7" y="293" width="1.5" height="15.0" fill="rgb(249,19,2)" rx="2" ry="2" />
<text  x="303.72" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (68 samples, 0.02%)</title><rect x="158.7" y="277" width="0.2" height="15.0" fill="rgb(252,33,47)" rx="2" ry="2" />
<text  x="161.66" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (24 samples, 0.01%)</title><rect x="159.6" y="293" width="0.1" height="15.0" fill="rgb(213,210,42)" rx="2" ry="2" />
<text  x="162.64" y="303.5" ></text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, std::ratio&lt;1l, 1000l&gt;, long, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (444 samples, 0.16%)</title><rect x="143.8" y="293" width="1.9" height="15.0" fill="rgb(216,130,11)" rx="2" ry="2" />
<text  x="146.81" y="303.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::enqueue&lt; (264 samples, 0.10%)</title><rect x="118.9" y="293" width="1.1" height="15.0" fill="rgb(225,0,6)" rx="2" ry="2" />
<text  x="121.88" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_addr (154 samples, 0.06%)</title><rect x="790.5" y="245" width="0.7" height="15.0" fill="rgb(225,92,46)" rx="2" ry="2" />
<text  x="793.49" y="255.5" ></text>
</g>
<g >
<title>change_prot_numa (102 samples, 0.04%)</title><rect x="211.6" y="181" width="0.4" height="15.0" fill="rgb(228,178,36)" rx="2" ry="2" />
<text  x="214.59" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (248 samples, 0.09%)</title><rect x="316.1" y="341" width="1.0" height="15.0" fill="rgb(219,179,4)" rx="2" ry="2" />
<text  x="319.05" y="351.5" ></text>
</g>
<g >
<title>__gthread_active_p (124 samples, 0.05%)</title><rect x="692.7" y="341" width="0.5" height="15.0" fill="rgb(211,222,38)" rx="2" ry="2" />
<text  x="695.71" y="351.5" ></text>
</g>
<g >
<title>do_futex (42,579 samples, 15.49%)</title><rect x="509.4" y="261" width="182.8" height="15.0" fill="rgb(237,46,28)" rx="2" ry="2" />
<text  x="512.41" y="271.5" >do_futex</text>
</g>
<g >
<title>moodycamel::details::circular_less_than&lt;unsigned long&gt; (101 samples, 0.04%)</title><rect x="190.4" y="309" width="0.4" height="15.0" fill="rgb(206,214,29)" rx="2" ry="2" />
<text  x="193.38" y="319.5" ></text>
</g>
<g >
<title>mlx5dv_open_device (367 samples, 0.13%)</title><rect x="135.3" y="293" width="1.6" height="15.0" fill="rgb(234,78,16)" rx="2" ry="2" />
<text  x="138.27" y="303.5" ></text>
</g>
<g >
<title>kv::ConnQue::enqueue (384 samples, 0.14%)</title><rect x="118.8" y="341" width="1.7" height="15.0" fill="rgb(250,65,43)" rx="2" ry="2" />
<text  x="121.81" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long&gt;, true&gt;::_S_cget (96 samples, 0.03%)</title><rect x="763.3" y="325" width="0.4" height="15.0" fill="rgb(223,17,29)" rx="2" ry="2" />
<text  x="766.26" y="335.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (40 samples, 0.01%)</title><rect x="1043.2" y="277" width="0.2" height="15.0" fill="rgb(243,54,9)" rx="2" ry="2" />
<text  x="1046.22" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,243 samples, 0.45%)</title><rect x="309.5" y="341" width="5.4" height="15.0" fill="rgb(248,221,8)" rx="2" ry="2" />
<text  x="312.53" y="351.5" ></text>
</g>
<g >
<title>kv::RDMAConnection::remote_write (7,046 samples, 2.56%)</title><rect x="120.5" y="341" width="30.2" height="15.0" fill="rgb(247,91,40)" rx="2" ry="2" />
<text  x="123.46" y="351.5" >kv..</text>
</g>
<g >
<title>kv::hashcode1B (46 samples, 0.02%)</title><rect x="1166.4" y="389" width="0.2" height="15.0" fill="rgb(250,75,22)" rx="2" ry="2" />
<text  x="1169.40" y="399.5" ></text>
</g>
<g >
<title>do_numa_page (163 samples, 0.06%)</title><rect x="1166.8" y="293" width="0.7" height="15.0" fill="rgb(232,90,40)" rx="2" ry="2" />
<text  x="1169.82" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (86 samples, 0.03%)</title><rect x="1184.4" y="549" width="0.4" height="15.0" fill="rgb(240,112,11)" rx="2" ry="2" />
<text  x="1187.44" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long const, unsigned int&gt; (38 samples, 0.01%)</title><rect x="313.1" y="261" width="0.2" height="15.0" fill="rgb(222,162,54)" rx="2" ry="2" />
<text  x="316.12" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (428 samples, 0.16%)</title><rect x="693.6" y="373" width="1.8" height="15.0" fill="rgb(243,213,35)" rx="2" ry="2" />
<text  x="696.58" y="383.5" ></text>
</g>
<g >
<title>futex_wait_setup (2,187 samples, 0.80%)</title><rect x="1075.4" y="229" width="9.4" height="15.0" fill="rgb(229,47,15)" rx="2" ry="2" />
<text  x="1078.43" y="239.5" ></text>
</g>
<g >
<title>schedule (263 samples, 0.10%)</title><rect x="385.2" y="213" width="1.1" height="15.0" fill="rgb(228,128,54)" rx="2" ry="2" />
<text  x="388.22" y="223.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::size_approx (486 samples, 0.18%)</title><rect x="1047.0" y="325" width="2.1" height="15.0" fill="rgb(254,89,36)" rx="2" ry="2" />
<text  x="1049.98" y="335.5" ></text>
</g>
<g >
<title>pthread_spin_lock (1,569 samples, 0.57%)</title><rect x="248.9" y="293" width="6.7" height="15.0" fill="rgb(233,53,28)" rx="2" ry="2" />
<text  x="251.91" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (38 samples, 0.01%)</title><rect x="1064.7" y="341" width="0.2" height="15.0" fill="rgb(250,25,17)" rx="2" ry="2" />
<text  x="1067.75" y="351.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (64 samples, 0.02%)</title><rect x="1062.4" y="293" width="0.3" height="15.0" fill="rgb(248,6,19)" rx="2" ry="2" />
<text  x="1065.44" y="303.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.19.35.0] (24 samples, 0.01%)</title><rect x="132.5" y="277" width="0.1" height="15.0" fill="rgb(233,81,31)" rx="2" ry="2" />
<text  x="135.51" y="287.5" ></text>
</g>
<g >
<title>kv::hash_map_t::find (7,166 samples, 2.61%)</title><rect x="1137.6" y="405" width="30.8" height="15.0" fill="rgb(209,6,28)" rx="2" ry="2" />
<text  x="1140.61" y="415.5" >kv..</text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::dequeue&lt;kv::RDMAConnection*&gt; (98 samples, 0.04%)</title><rect x="1035.2" y="309" width="0.4" height="15.0" fill="rgb(213,2,30)" rx="2" ry="2" />
<text  x="1038.22" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (728 samples, 0.26%)</title><rect x="798.4" y="341" width="3.2" height="15.0" fill="rgb(243,104,1)" rx="2" ry="2" />
<text  x="801.43" y="351.5" ></text>
</g>
<g >
<title>__do_page_fault (34 samples, 0.01%)</title><rect x="110.1" y="341" width="0.1" height="15.0" fill="rgb(208,158,31)" rx="2" ry="2" />
<text  x="113.09" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (90 samples, 0.03%)</title><rect x="1134.5" y="293" width="0.4" height="15.0" fill="rgb(253,128,33)" rx="2" ry="2" />
<text  x="1137.50" y="303.5" ></text>
</g>
<g >
<title>std::operator&amp; (47 samples, 0.02%)</title><rect x="186.9" y="277" width="0.2" height="15.0" fill="rgb(251,186,51)" rx="2" ry="2" />
<text  x="189.89" y="287.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (240 samples, 0.09%)</title><rect x="1158.5" y="389" width="1.0" height="15.0" fill="rgb(248,164,50)" rx="2" ry="2" />
<text  x="1161.48" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt;::push_back (41 samples, 0.01%)</title><rect x="1041.6" y="357" width="0.2" height="15.0" fill="rgb(237,91,43)" rx="2" ry="2" />
<text  x="1044.62" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (133 samples, 0.05%)</title><rect x="315.5" y="341" width="0.6" height="15.0" fill="rgb(214,94,14)" rx="2" ry="2" />
<text  x="318.48" y="351.5" ></text>
</g>
<g >
<title>page_fault (507 samples, 0.18%)</title><rect x="28.7" y="373" width="2.2" height="15.0" fill="rgb(254,225,18)" rx="2" ry="2" />
<text  x="31.72" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1,549 samples, 0.56%)</title><rect x="308.5" y="357" width="6.7" height="15.0" fill="rgb(226,228,28)" rx="2" ry="2" />
<text  x="311.53" y="367.5" ></text>
</g>
<g >
<title>std::atomic_flag::clear (232 samples, 0.08%)</title><rect x="1165.4" y="373" width="1.0" height="15.0" fill="rgb(253,69,37)" rx="2" ry="2" />
<text  x="1168.40" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,813 samples, 1.02%)</title><rect x="1073.5" y="309" width="12.1" height="15.0" fill="rgb(247,134,53)" rx="2" ry="2" />
<text  x="1076.48" y="319.5" ></text>
</g>
<g >
<title>do_user_addr_fault (55 samples, 0.02%)</title><rect x="105.4" y="325" width="0.3" height="15.0" fill="rgb(246,108,18)" rx="2" ry="2" />
<text  x="108.43" y="335.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (106 samples, 0.04%)</title><rect x="145.0" y="277" width="0.5" height="15.0" fill="rgb(252,142,3)" rx="2" ry="2" />
<text  x="148.01" y="287.5" ></text>
</g>
<g >
<title>do_user_addr_fault (499 samples, 0.18%)</title><rect x="28.7" y="325" width="2.2" height="15.0" fill="rgb(236,125,13)" rx="2" ry="2" />
<text  x="31.72" y="335.5" ></text>
</g>
<g >
<title>handle_mm_fault (157 samples, 0.06%)</title><rect x="1169.7" y="357" width="0.7" height="15.0" fill="rgb(219,191,46)" rx="2" ry="2" />
<text  x="1172.68" y="367.5" ></text>
</g>
<g >
<title>handle_mm_fault (31 samples, 0.01%)</title><rect x="105.5" y="309" width="0.2" height="15.0" fill="rgb(244,189,48)" rx="2" ry="2" />
<text  x="108.53" y="319.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::enqueue&lt; (136 samples, 0.05%)</title><rect x="1049.2" y="309" width="0.6" height="15.0" fill="rgb(240,163,21)" rx="2" ry="2" />
<text  x="1052.18" y="319.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (32,181 samples, 11.71%)</title><rect x="318.8" y="389" width="138.2" height="15.0" fill="rgb(233,4,26)" rx="2" ry="2" />
<text  x="321.83" y="399.5" >std::lock_guard&lt;s..</text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::fetch_add (64 samples, 0.02%)</title><rect x="1046.5" y="293" width="0.2" height="15.0" fill="rgb(253,62,1)" rx="2" ry="2" />
<text  x="1049.46" y="303.5" ></text>
</g>
<g >
<title>std::atomic&lt;moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::BlockIndexHeader*&gt;::load (24 samples, 0.01%)</title><rect x="184.6" y="261" width="0.1" height="15.0" fill="rgb(251,188,14)" rx="2" ry="2" />
<text  x="187.60" y="271.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (722 samples, 0.26%)</title><rect x="304.8" y="325" width="3.1" height="15.0" fill="rgb(236,79,9)" rx="2" ry="2" />
<text  x="307.82" y="335.5" ></text>
</g>
<g >
<title>mlx5dv_open_device (1,612 samples, 0.59%)</title><rect x="256.2" y="309" width="6.9" height="15.0" fill="rgb(214,12,10)" rx="2" ry="2" />
<text  x="259.22" y="319.5" ></text>
</g>
<g >
<title>change_pte_range (98 samples, 0.04%)</title><rect x="211.6" y="133" width="0.4" height="15.0" fill="rgb(234,35,35)" rx="2" ry="2" />
<text  x="214.60" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (29 samples, 0.01%)</title><rect x="151.5" y="293" width="0.2" height="15.0" fill="rgb(225,154,13)" rx="2" ry="2" />
<text  x="154.53" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (95 samples, 0.03%)</title><rect x="1167.9" y="357" width="0.4" height="15.0" fill="rgb(245,106,42)" rx="2" ry="2" />
<text  x="1170.90" y="367.5" ></text>
</g>
<g >
<title>smp_call_function_many (331 samples, 0.12%)</title><rect x="1012.8" y="101" width="1.5" height="15.0" fill="rgb(227,45,15)" rx="2" ry="2" />
<text  x="1015.84" y="111.5" ></text>
</g>
<g >
<title>try_to_unmap (97 samples, 0.04%)</title><rect x="1167.1" y="245" width="0.4" height="15.0" fill="rgb(216,91,19)" rx="2" ry="2" />
<text  x="1170.08" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (112 samples, 0.04%)</title><rect x="309.0" y="325" width="0.5" height="15.0" fill="rgb(241,167,42)" rx="2" ry="2" />
<text  x="312.05" y="335.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (282 samples, 0.10%)</title><rect x="210.8" y="293" width="1.2" height="15.0" fill="rgb(224,72,42)" rx="2" ry="2" />
<text  x="213.82" y="303.5" ></text>
</g>
<g >
<title>std::mutex::lock (77 samples, 0.03%)</title><rect x="1063.3" y="357" width="0.3" height="15.0" fill="rgb(236,203,35)" rx="2" ry="2" />
<text  x="1066.31" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (42 samples, 0.02%)</title><rect x="1127.5" y="309" width="0.1" height="15.0" fill="rgb(230,117,32)" rx="2" ry="2" />
<text  x="1130.46" y="319.5" ></text>
</g>
<g >
<title>kv::RDMAMemPool::get_rkey (3,105 samples, 1.13%)</title><rect x="304.0" y="389" width="13.4" height="15.0" fill="rgb(250,180,26)" rx="2" ry="2" />
<text  x="307.04" y="399.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (220 samples, 0.08%)</title><rect x="1039.1" y="309" width="0.9" height="15.0" fill="rgb(224,144,5)" rx="2" ry="2" />
<text  x="1042.06" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (211 samples, 0.08%)</title><rect x="1063.7" y="357" width="0.9" height="15.0" fill="rgb(250,21,33)" rx="2" ry="2" />
<text  x="1066.72" y="367.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (34 samples, 0.01%)</title><rect x="316.9" y="277" width="0.1" height="15.0" fill="rgb(248,195,9)" rx="2" ry="2" />
<text  x="319.89" y="287.5" ></text>
</g>
<g >
<title>change_pte_range (54 samples, 0.02%)</title><rect x="692.5" y="181" width="0.2" height="15.0" fill="rgb(225,70,2)" rx="2" ry="2" />
<text  x="695.48" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt;::begin (38 samples, 0.01%)</title><rect x="175.5" y="341" width="0.1" height="15.0" fill="rgb(211,8,28)" rx="2" ry="2" />
<text  x="178.48" y="351.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (567 samples, 0.21%)</title><rect x="1057.5" y="309" width="2.5" height="15.0" fill="rgb(247,194,34)" rx="2" ry="2" />
<text  x="1060.52" y="319.5" ></text>
</g>
<g >
<title>__unqueue_futex (1,274 samples, 0.46%)</title><rect x="575.3" y="213" width="5.5" height="15.0" fill="rgb(241,154,7)" rx="2" ry="2" />
<text  x="578.28" y="223.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,105 samples, 0.40%)</title><rect x="1020.9" y="405" width="4.8" height="15.0" fill="rgb(249,157,26)" rx="2" ry="2" />
<text  x="1023.92" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;::_M_v (26 samples, 0.01%)</title><rect x="1181.4" y="549" width="0.1" height="15.0" fill="rgb(239,130,32)" rx="2" ry="2" />
<text  x="1184.35" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (31 samples, 0.01%)</title><rect x="801.7" y="341" width="0.1" height="15.0" fill="rgb(220,135,6)" rx="2" ry="2" />
<text  x="804.66" y="351.5" ></text>
</g>
<g >
<title>moodycamel::details::hash_thread_id (38 samples, 0.01%)</title><rect x="1050.0" y="293" width="0.2" height="15.0" fill="rgb(250,114,18)" rx="2" ry="2" />
<text  x="1052.99" y="303.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned int, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt; &gt;::operator[] (187 samples, 0.07%)</title><rect x="153.4" y="357" width="0.8" height="15.0" fill="rgb(243,210,23)" rx="2" ry="2" />
<text  x="156.43" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,193 samples, 0.43%)</title><rect x="120.5" y="325" width="5.1" height="15.0" fill="rgb(226,160,51)" rx="2" ry="2" />
<text  x="123.51" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (308 samples, 0.11%)</title><rect x="744.0" y="277" width="1.3" height="15.0" fill="rgb(211,23,34)" rx="2" ry="2" />
<text  x="746.99" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_futex (18,387 samples, 6.69%)</title><rect x="377.7" y="277" width="78.9" height="15.0" fill="rgb(236,6,35)" rx="2" ry="2" />
<text  x="380.67" y="287.5" >__x64_sys..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (144 samples, 0.05%)</title><rect x="316.4" y="293" width="0.6" height="15.0" fill="rgb(221,132,8)" rx="2" ry="2" />
<text  x="319.42" y="303.5" ></text>
</g>
<g >
<title>kv::ConnQue::dequeue (5,807 samples, 2.11%)</title><rect x="179.0" y="357" width="24.9" height="15.0" fill="rgb(206,202,4)" rx="2" ry="2" />
<text  x="182.01" y="367.5" >k..</text>
</g>
<g >
<title>kv::RDMAConnection::rdma_remote_write (905 samples, 0.33%)</title><rect x="1037.2" y="325" width="3.9" height="15.0" fill="rgb(246,67,5)" rx="2" ry="2" />
<text  x="1040.25" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (78 samples, 0.03%)</title><rect x="153.8" y="309" width="0.3" height="15.0" fill="rgb(216,32,30)" rx="2" ry="2" />
<text  x="156.78" y="319.5" ></text>
</g>
<g >
<title>__gthread_active_p (55 samples, 0.02%)</title><rect x="456.8" y="341" width="0.2" height="15.0" fill="rgb(252,181,35)" rx="2" ry="2" />
<text  x="459.78" y="351.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (48 samples, 0.02%)</title><rect x="1064.4" y="277" width="0.2" height="15.0" fill="rgb(248,50,35)" rx="2" ry="2" />
<text  x="1067.39" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (4,878 samples, 1.78%)</title><rect x="740.8" y="325" width="21.0" height="15.0" fill="rgb(252,155,27)" rx="2" ry="2" />
<text  x="743.84" y="335.5" ></text>
</g>
<g >
<title>all (274,799 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(241,159,43)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::erase (388 samples, 0.14%)</title><rect x="1041.8" y="373" width="1.7" height="15.0" fill="rgb(219,50,46)" rx="2" ry="2" />
<text  x="1044.80" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (244 samples, 0.09%)</title><rect x="1184.4" y="565" width="1.1" height="15.0" fill="rgb(229,142,6)" rx="2" ry="2" />
<text  x="1187.44" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (43 samples, 0.02%)</title><rect x="740.4" y="293" width="0.2" height="15.0" fill="rgb(210,85,40)" rx="2" ry="2" />
<text  x="743.37" y="303.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,285 samples, 0.47%)</title><rect x="1077.5" y="213" width="5.5" height="15.0" fill="rgb(247,21,14)" rx="2" ry="2" />
<text  x="1080.53" y="223.5" ></text>
</g>
<g >
<title>kv::ConnQue::dequeue (1,536 samples, 0.56%)</title><rect x="112.2" y="341" width="6.6" height="15.0" fill="rgb(233,182,26)" rx="2" ry="2" />
<text  x="115.21" y="351.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (735 samples, 0.27%)</title><rect x="304.8" y="341" width="3.1" height="15.0" fill="rgb(250,79,14)" rx="2" ry="2" />
<text  x="307.78" y="351.5" ></text>
</g>
<g >
<title>ptep_clear_flush (89 samples, 0.03%)</title><rect x="1167.1" y="181" width="0.4" height="15.0" fill="rgb(240,40,8)" rx="2" ry="2" />
<text  x="1170.11" y="191.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (75 samples, 0.03%)</title><rect x="1063.3" y="341" width="0.3" height="15.0" fill="rgb(214,188,23)" rx="2" ry="2" />
<text  x="1066.32" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (64 samples, 0.02%)</title><rect x="1064.3" y="293" width="0.3" height="15.0" fill="rgb(221,210,31)" rx="2" ry="2" />
<text  x="1067.32" y="303.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (527 samples, 0.19%)</title><rect x="1057.7" y="293" width="2.3" height="15.0" fill="rgb(245,43,42)" rx="2" ry="2" />
<text  x="1060.69" y="303.5" ></text>
</g>
<g >
<title>std::queue&lt;kv::ListNode*, std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt; &gt;::size (79 samples, 0.03%)</title><rect x="1045.3" y="373" width="0.3" height="15.0" fill="rgb(253,96,11)" rx="2" ry="2" />
<text  x="1048.27" y="383.5" ></text>
</g>
<g >
<title>futex_wait (18,124 samples, 6.60%)</title><rect x="378.6" y="245" width="77.8" height="15.0" fill="rgb(234,136,4)" rx="2" ry="2" />
<text  x="381.58" y="255.5" >futex_wait</text>
</g>
<g >
<title>try_to_wake_up (3,647 samples, 1.33%)</title><rect x="1104.9" y="213" width="15.6" height="15.0" fill="rgb(227,180,52)" rx="2" ry="2" />
<text  x="1107.88" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2,184 samples, 0.79%)</title><rect x="769.3" y="357" width="9.4" height="15.0" fill="rgb(244,109,31)" rx="2" ry="2" />
<text  x="772.32" y="367.5" ></text>
</g>
<g >
<title>do_futex (28 samples, 0.01%)</title><rect x="692.3" y="277" width="0.2" height="15.0" fill="rgb(225,226,17)" rx="2" ry="2" />
<text  x="695.35" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (70 samples, 0.03%)</title><rect x="1064.3" y="309" width="0.3" height="15.0" fill="rgb(229,210,41)" rx="2" ry="2" />
<text  x="1067.31" y="319.5" ></text>
</g>
<g >
<title>ptep_clear_flush (42 samples, 0.02%)</title><rect x="1170.1" y="213" width="0.2" height="15.0" fill="rgb(231,211,6)" rx="2" ry="2" />
<text  x="1173.09" y="223.5" ></text>
</g>
<g >
<title>TestKey::to_string[abi:cxx11] (3,764 samples, 1.37%)</title><rect x="19.2" y="421" width="16.1" height="15.0" fill="rgb(214,91,11)" rx="2" ry="2" />
<text  x="22.15" y="431.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (33 samples, 0.01%)</title><rect x="1170.1" y="149" width="0.2" height="15.0" fill="rgb(218,80,22)" rx="2" ry="2" />
<text  x="1173.11" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (50 samples, 0.02%)</title><rect x="153.5" y="325" width="0.2" height="15.0" fill="rgb(228,32,44)" rx="2" ry="2" />
<text  x="156.53" y="335.5" ></text>
</g>
<g >
<title>tlb_is_not_lazy (36 samples, 0.01%)</title><rect x="1014.3" y="133" width="0.1" height="15.0" fill="rgb(214,63,47)" rx="2" ry="2" />
<text  x="1017.28" y="143.5" ></text>
</g>
<g >
<title>smp_call_function_many (30 samples, 0.01%)</title><rect x="1170.1" y="133" width="0.2" height="15.0" fill="rgb(214,126,15)" rx="2" ry="2" />
<text  x="1173.13" y="143.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (112 samples, 0.04%)</title><rect x="1168.6" y="389" width="0.4" height="15.0" fill="rgb(252,168,23)" rx="2" ry="2" />
<text  x="1171.56" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (479 samples, 0.17%)</title><rect x="794.4" y="293" width="2.1" height="15.0" fill="rgb(249,99,11)" rx="2" ry="2" />
<text  x="797.41" y="303.5" ></text>
</g>
<g >
<title>migrate_page_copy (43 samples, 0.02%)</title><rect x="1011.3" y="213" width="0.2" height="15.0" fill="rgb(252,165,16)" rx="2" ry="2" />
<text  x="1014.34" y="223.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;::count (53 samples, 0.02%)</title><rect x="1060.0" y="325" width="0.2" height="15.0" fill="rgb(242,220,10)" rx="2" ry="2" />
<text  x="1062.95" y="335.5" ></text>
</g>
<g >
<title>std::mutex::unlock (102 samples, 0.04%)</title><rect x="1188.9" y="549" width="0.5" height="15.0" fill="rgb(212,179,39)" rx="2" ry="2" />
<text  x="1191.94" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long&gt;, true&gt;::_S_cget (26 samples, 0.01%)</title><rect x="1182.1" y="549" width="0.1" height="15.0" fill="rgb(230,26,2)" rx="2" ry="2" />
<text  x="1185.11" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_futex (6,241 samples, 2.27%)</title><rect x="1093.9" y="277" width="26.8" height="15.0" fill="rgb(234,126,42)" rx="2" ry="2" />
<text  x="1096.94" y="287.5" >_..</text>
</g>
<g >
<title>do_numa_page (1,163 samples, 0.42%)</title><rect x="1009.8" y="293" width="5.0" height="15.0" fill="rgb(249,114,19)" rx="2" ry="2" />
<text  x="1012.80" y="303.5" ></text>
</g>
<g >
<title>kv::LRUCache::Find (177,621 samples, 64.64%)</title><rect x="47.6" y="405" width="762.8" height="15.0" fill="rgb(236,212,18)" rx="2" ry="2" />
<text  x="50.65" y="415.5" >kv::LRUCache::Find</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (51 samples, 0.02%)</title><rect x="1137.3" y="341" width="0.2" height="15.0" fill="rgb(213,32,1)" rx="2" ry="2" />
<text  x="1140.33" y="351.5" ></text>
</g>
<g >
<title>do_numa_page (31 samples, 0.01%)</title><rect x="317.7" y="293" width="0.2" height="15.0" fill="rgb(236,114,19)" rx="2" ry="2" />
<text  x="320.72" y="303.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (1,030 samples, 0.37%)</title><rect x="1097.1" y="213" width="4.5" height="15.0" fill="rgb(240,167,54)" rx="2" ry="2" />
<text  x="1100.14" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (227 samples, 0.08%)</title><rect x="771.3" y="325" width="1.0" height="15.0" fill="rgb(242,46,16)" rx="2" ry="2" />
<text  x="774.33" y="335.5" ></text>
</g>
<g >
<title>page_fault (34 samples, 0.01%)</title><rect x="110.1" y="373" width="0.1" height="15.0" fill="rgb(250,125,22)" rx="2" ry="2" />
<text  x="113.09" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt;::_Node_iterator_base (142 samples, 0.05%)</title><rect x="694.8" y="341" width="0.6" height="15.0" fill="rgb(240,216,11)" rx="2" ry="2" />
<text  x="697.81" y="351.5" ></text>
</g>
<g >
<title>ibv_poll_cq (864 samples, 0.31%)</title><rect x="1052.6" y="325" width="3.7" height="15.0" fill="rgb(217,166,29)" rx="2" ry="2" />
<text  x="1055.56" y="335.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (86 samples, 0.03%)</title><rect x="1167.1" y="149" width="0.4" height="15.0" fill="rgb(222,226,7)" rx="2" ry="2" />
<text  x="1170.13" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (77 samples, 0.03%)</title><rect x="1185.2" y="549" width="0.3" height="15.0" fill="rgb(210,213,31)" rx="2" ry="2" />
<text  x="1188.16" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (98 samples, 0.04%)</title><rect x="1178.1" y="549" width="0.4" height="15.0" fill="rgb(230,185,5)" rx="2" ry="2" />
<text  x="1181.11" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (517 samples, 0.19%)</title><rect x="711.2" y="309" width="2.3" height="15.0" fill="rgb(247,177,33)" rx="2" ry="2" />
<text  x="714.24" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (25 samples, 0.01%)</title><rect x="800.8" y="293" width="0.1" height="15.0" fill="rgb(214,151,4)" rx="2" ry="2" />
<text  x="803.83" y="303.5" ></text>
</g>
<g >
<title>moodycamel::details::circular_less_than&lt;unsigned long&gt; (36 samples, 0.01%)</title><rect x="115.7" y="293" width="0.1" height="15.0" fill="rgb(232,229,52)" rx="2" ry="2" />
<text  x="118.68" y="303.5" ></text>
</g>
<g >
<title>do_futex (6,205 samples, 2.26%)</title><rect x="1094.1" y="261" width="26.6" height="15.0" fill="rgb(245,220,45)" rx="2" ry="2" />
<text  x="1097.08" y="271.5" >d..</text>
</g>
<g >
<title>kv::Spinlock::lock (9,091 samples, 3.31%)</title><rect x="960.1" y="389" width="39.0" height="15.0" fill="rgb(212,87,44)" rx="2" ry="2" />
<text  x="963.08" y="399.5" >kv:..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (46 samples, 0.02%)</title><rect x="151.5" y="309" width="0.2" height="15.0" fill="rgb(238,6,30)" rx="2" ry="2" />
<text  x="154.46" y="319.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::size_approx (43 samples, 0.02%)</title><rect x="1177.5" y="549" width="0.2" height="15.0" fill="rgb(233,171,20)" rx="2" ry="2" />
<text  x="1180.50" y="559.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::size_approx (131 samples, 0.05%)</title><rect x="1035.7" y="309" width="0.5" height="15.0" fill="rgb(205,180,14)" rx="2" ry="2" />
<text  x="1038.68" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (53 samples, 0.02%)</title><rect x="1025.4" y="389" width="0.3" height="15.0" fill="rgb(208,162,41)" rx="2" ry="2" />
<text  x="1028.43" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (32 samples, 0.01%)</title><rect x="785.3" y="293" width="0.2" height="15.0" fill="rgb(223,86,16)" rx="2" ry="2" />
<text  x="788.32" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long const, kv::ListNode*&gt; (402 samples, 0.15%)</title><rect x="747.0" y="277" width="1.7" height="15.0" fill="rgb(247,151,21)" rx="2" ry="2" />
<text  x="749.97" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (173 samples, 0.06%)</title><rect x="1168.4" y="405" width="0.8" height="15.0" fill="rgb(205,219,20)" rx="2" ry="2" />
<text  x="1171.43" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (49 samples, 0.02%)</title><rect x="1041.3" y="325" width="0.2" height="15.0" fill="rgb(205,75,27)" rx="2" ry="2" />
<text  x="1044.26" y="335.5" ></text>
</g>
<g >
<title>get_futex_key (28 samples, 0.01%)</title><rect x="451.7" y="229" width="0.1" height="15.0" fill="rgb(226,5,24)" rx="2" ry="2" />
<text  x="454.69" y="239.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (1,318 samples, 0.48%)</title><rect x="137.3" y="293" width="5.7" height="15.0" fill="rgb(209,31,35)" rx="2" ry="2" />
<text  x="140.33" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_ptr (279 samples, 0.10%)</title><rect x="790.0" y="261" width="1.2" height="15.0" fill="rgb(237,59,53)" rx="2" ry="2" />
<text  x="792.96" y="271.5" ></text>
</g>
<g >
<title>_raw_spin_lock (7,308 samples, 2.66%)</title><rect x="531.8" y="229" width="31.4" height="15.0" fill="rgb(214,182,3)" rx="2" ry="2" />
<text  x="534.77" y="239.5" >_r..</text>
</g>
<g >
<title>std::__detail::_Select1st::operator (63 samples, 0.02%)</title><rect x="801.2" y="293" width="0.3" height="15.0" fill="rgb(252,28,46)" rx="2" ry="2" />
<text  x="804.23" y="303.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__const_get&lt;unsigned long const, kv::ListNode*&gt; (39 samples, 0.01%)</title><rect x="801.3" y="261" width="0.2" height="15.0" fill="rgb(212,98,49)" rx="2" ry="2" />
<text  x="804.33" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (26 samples, 0.01%)</title><rect x="164.7" y="277" width="0.1" height="15.0" fill="rgb(242,77,12)" rx="2" ry="2" />
<text  x="167.70" y="287.5" ></text>
</g>
<g >
<title>migrate_pages (979 samples, 0.36%)</title><rect x="1010.2" y="261" width="4.3" height="15.0" fill="rgb(235,54,2)" rx="2" ry="2" />
<text  x="1013.25" y="271.5" ></text>
</g>
<g >
<title>get_futex_key (33 samples, 0.01%)</title><rect x="691.1" y="245" width="0.1" height="15.0" fill="rgb(247,204,21)" rx="2" ry="2" />
<text  x="694.08" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (6,480 samples, 2.36%)</title><rect x="1092.9" y="293" width="27.9" height="15.0" fill="rgb(249,121,6)" rx="2" ry="2" />
<text  x="1095.94" y="303.5" >d..</text>
</g>
<g >
<title>std::atomic_flag::test_and_set (8,800 samples, 3.20%)</title><rect x="961.3" y="373" width="37.8" height="15.0" fill="rgb(242,3,53)" rx="2" ry="2" />
<text  x="964.33" y="383.5" >std..</text>
</g>
<g >
<title>std::__detail::_Select1st::operator (95 samples, 0.03%)</title><rect x="1186.4" y="565" width="0.4" height="15.0" fill="rgb(229,127,10)" rx="2" ry="2" />
<text  x="1189.43" y="575.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (8,795 samples, 3.20%)</title><rect x="401.2" y="197" width="37.8" height="15.0" fill="rgb(226,176,16)" rx="2" ry="2" />
<text  x="404.20" y="207.5" >nat..</text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;::duration&lt;long, void&gt; (25 samples, 0.01%)</title><rect x="1061.1" y="293" width="0.1" height="15.0" fill="rgb(226,180,7)" rx="2" ry="2" />
<text  x="1064.07" y="303.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (35 samples, 0.01%)</title><rect x="1170.1" y="165" width="0.2" height="15.0" fill="rgb(225,209,9)" rx="2" ry="2" />
<text  x="1173.11" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (54 samples, 0.02%)</title><rect x="1025.2" y="389" width="0.2" height="15.0" fill="rgb(254,109,41)" rx="2" ry="2" />
<text  x="1028.20" y="399.5" ></text>
</g>
<g >
<title>__do_page_fault (222 samples, 0.08%)</title><rect x="1166.6" y="357" width="1.0" height="15.0" fill="rgb(220,122,26)" rx="2" ry="2" />
<text  x="1169.60" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt;::allocate (169 samples, 0.06%)</title><rect x="807.6" y="325" width="0.7" height="15.0" fill="rgb(241,225,22)" rx="2" ry="2" />
<text  x="810.61" y="335.5" ></text>
</g>
<g >
<title>std::queue&lt;kv::ListNode*, std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt; &gt;::size (528 samples, 0.19%)</title><rect x="176.3" y="373" width="2.3" height="15.0" fill="rgb(225,190,8)" rx="2" ry="2" />
<text  x="179.31" y="383.5" ></text>
</g>
<g >
<title>hash_futex (37 samples, 0.01%)</title><rect x="1120.5" y="245" width="0.2" height="15.0" fill="rgb(219,44,33)" rx="2" ry="2" />
<text  x="1123.55" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_ptr (44 samples, 0.02%)</title><rect x="1136.9" y="325" width="0.2" height="15.0" fill="rgb(206,181,23)" rx="2" ry="2" />
<text  x="1139.90" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (278 samples, 0.10%)</title><rect x="1123.4" y="341" width="1.2" height="15.0" fill="rgb(214,102,3)" rx="2" ry="2" />
<text  x="1126.45" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (320 samples, 0.12%)</title><rect x="1050.6" y="341" width="1.4" height="15.0" fill="rgb(237,124,4)" rx="2" ry="2" />
<text  x="1053.60" y="351.5" ></text>
</g>
<g >
<title>[[vdso]] (3,202 samples, 1.17%)</title><rect x="267.6" y="277" width="13.8" height="15.0" fill="rgb(242,83,2)" rx="2" ry="2" />
<text  x="270.62" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_addr (24 samples, 0.01%)</title><rect x="1137.0" y="309" width="0.1" height="15.0" fill="rgb(224,114,13)" rx="2" ry="2" />
<text  x="1139.99" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (31 samples, 0.01%)</title><rect x="1130.7" y="341" width="0.1" height="15.0" fill="rgb(233,88,17)" rx="2" ry="2" />
<text  x="1133.70" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (155 samples, 0.06%)</title><rect x="33.9" y="389" width="0.6" height="15.0" fill="rgb(212,60,28)" rx="2" ry="2" />
<text  x="36.88" y="399.5" ></text>
</g>
<g >
<title>task_work_run (56 samples, 0.02%)</title><rect x="692.5" y="261" width="0.2" height="15.0" fill="rgb(219,98,28)" rx="2" ry="2" />
<text  x="695.47" y="271.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::inner_enqueue&lt; (308 samples, 0.11%)</title><rect x="1049.1" y="325" width="1.4" height="15.0" fill="rgb(235,29,1)" rx="2" ry="2" />
<text  x="1052.15" y="335.5" ></text>
</g>
<g >
<title>__do_page_fault (1,618 samples, 0.59%)</title><rect x="1008.0" y="357" width="7.0" height="15.0" fill="rgb(254,140,40)" rx="2" ry="2" />
<text  x="1011.01" y="367.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;::duration&lt;long, void&gt; (217 samples, 0.08%)</title><rect x="289.2" y="293" width="0.9" height="15.0" fill="rgb(246,111,30)" rx="2" ry="2" />
<text  x="292.19" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,795 samples, 1.02%)</title><rect x="1073.6" y="293" width="12.0" height="15.0" fill="rgb(225,120,18)" rx="2" ry="2" />
<text  x="1076.55" y="303.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;main::{lambda (270,326 samples, 98.37%)</title><rect x="10.1" y="485" width="1160.8" height="15.0" fill="rgb(234,70,20)" rx="2" ry="2" />
<text  x="13.13" y="495.5" >std::thread::_Invoker&lt;std::tuple&lt;main::{lambda</text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (28 samples, 0.01%)</title><rect x="580.9" y="229" width="0.1" height="15.0" fill="rgb(214,94,3)" rx="2" ry="2" />
<text  x="583.89" y="239.5" ></text>
</g>
<g >
<title>std::atomic&lt;moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::Block*&gt;::load (47 samples, 0.02%)</title><rect x="184.4" y="261" width="0.2" height="15.0" fill="rgb(245,2,52)" rx="2" ry="2" />
<text  x="187.40" y="271.5" ></text>
</g>
<g >
<title>kv::ConnQue::enqueue (317 samples, 0.12%)</title><rect x="1049.1" y="357" width="1.4" height="15.0" fill="rgb(253,229,12)" rx="2" ry="2" />
<text  x="1052.11" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (170 samples, 0.06%)</title><rect x="1185.6" y="565" width="0.7" height="15.0" fill="rgb(233,223,0)" rx="2" ry="2" />
<text  x="1188.56" y="575.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (39 samples, 0.01%)</title><rect x="114.6" y="277" width="0.1" height="15.0" fill="rgb(205,96,45)" rx="2" ry="2" />
<text  x="117.56" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (60 samples, 0.02%)</title><rect x="153.9" y="293" width="0.2" height="15.0" fill="rgb(211,155,42)" rx="2" ry="2" />
<text  x="156.86" y="303.5" ></text>
</g>
<g >
<title>copy_page (70 samples, 0.03%)</title><rect x="1011.0" y="213" width="0.3" height="15.0" fill="rgb(242,94,31)" rx="2" ry="2" />
<text  x="1014.04" y="223.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt;*&gt;::pointer_to (27 samples, 0.01%)</title><rect x="161.8" y="277" width="0.1" height="15.0" fill="rgb(235,73,43)" rx="2" ry="2" />
<text  x="164.75" y="287.5" ></text>
</g>
<g >
<title>kv::RDMAConnection::remote_read (2,971 samples, 1.08%)</title><rect x="1050.5" y="357" width="12.7" height="15.0" fill="rgb(240,100,9)" rx="2" ry="2" />
<text  x="1053.47" y="367.5" ></text>
</g>
<g >
<title>page_fault (215 samples, 0.08%)</title><rect x="1169.4" y="421" width="1.0" height="15.0" fill="rgb(237,82,8)" rx="2" ry="2" />
<text  x="1172.44" y="431.5" ></text>
</g>
<g >
<title>kv::LRUCache::Find (415 samples, 0.15%)</title><rect x="1171.9" y="565" width="1.8" height="15.0" fill="rgb(248,174,2)" rx="2" ry="2" />
<text  x="1174.88" y="575.5" ></text>
</g>
<g >
<title>std::__invoke&lt;main::{lambda (270,326 samples, 98.37%)</title><rect x="10.1" y="469" width="1160.8" height="15.0" fill="rgb(212,124,25)" rx="2" ry="2" />
<text  x="13.13" y="479.5" >std::__invoke&lt;main::{lambda</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (70 samples, 0.03%)</title><rect x="1136.1" y="325" width="0.3" height="15.0" fill="rgb(215,185,35)" rx="2" ry="2" />
<text  x="1139.08" y="335.5" ></text>
</g>
<g >
<title>rmap_walk_anon (601 samples, 0.22%)</title><rect x="1011.9" y="213" width="2.5" height="15.0" fill="rgb(207,202,38)" rx="2" ry="2" />
<text  x="1014.86" y="223.5" ></text>
</g>
<g >
<title>handle_mm_fault (63 samples, 0.02%)</title><rect x="317.6" y="325" width="0.3" height="15.0" fill="rgb(227,62,49)" rx="2" ry="2" />
<text  x="320.60" y="335.5" ></text>
</g>
<g >
<title>do_user_addr_fault (212 samples, 0.08%)</title><rect x="1169.4" y="373" width="1.0" height="15.0" fill="rgb(224,28,4)" rx="2" ry="2" />
<text  x="1172.44" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_ptr (118 samples, 0.04%)</title><rect x="1183.7" y="549" width="0.5" height="15.0" fill="rgb(206,159,13)" rx="2" ry="2" />
<text  x="1186.67" y="559.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::fetch_add (373 samples, 0.14%)</title><rect x="185.0" y="293" width="1.6" height="15.0" fill="rgb(221,149,11)" rx="2" ry="2" />
<text  x="187.99" y="303.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (452 samples, 0.16%)</title><rect x="1012.3" y="117" width="2.0" height="15.0" fill="rgb(227,12,8)" rx="2" ry="2" />
<text  x="1015.32" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (41 samples, 0.01%)</title><rect x="166.3" y="325" width="0.2" height="15.0" fill="rgb(252,77,4)" rx="2" ry="2" />
<text  x="169.33" y="335.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (71 samples, 0.03%)</title><rect x="1062.9" y="309" width="0.3" height="15.0" fill="rgb(241,85,28)" rx="2" ry="2" />
<text  x="1065.92" y="319.5" ></text>
</g>
<g >
<title>[rdma_client] (29 samples, 0.01%)</title><rect x="458.9" y="341" width="0.1" height="15.0" fill="rgb(252,21,24)" rx="2" ry="2" />
<text  x="461.92" y="351.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (678 samples, 0.25%)</title><rect x="115.8" y="293" width="2.9" height="15.0" fill="rgb(225,78,4)" rx="2" ry="2" />
<text  x="118.83" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (631 samples, 0.23%)</title><rect x="788.4" y="293" width="2.8" height="15.0" fill="rgb(224,46,49)" rx="2" ry="2" />
<text  x="791.45" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (37 samples, 0.01%)</title><rect x="1186.1" y="549" width="0.1" height="15.0" fill="rgb(243,111,50)" rx="2" ry="2" />
<text  x="1189.08" y="559.5" ></text>
</g>
<g >
<title>std::queue&lt;kv::ListNode*, std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt; &gt;::pop (24 samples, 0.01%)</title><rect x="1045.2" y="373" width="0.1" height="15.0" fill="rgb(209,165,22)" rx="2" ry="2" />
<text  x="1048.17" y="383.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (8,098 samples, 2.95%)</title><rect x="1086.0" y="341" width="34.8" height="15.0" fill="rgb(230,193,22)" rx="2" ry="2" />
<text  x="1088.99" y="351.5" >__..</text>
</g>
<g >
<title>ptep_clear_flush (135 samples, 0.05%)</title><rect x="30.1" y="165" width="0.6" height="15.0" fill="rgb(239,103,29)" rx="2" ry="2" />
<text  x="33.14" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1,514 samples, 0.55%)</title><rect x="1131.1" y="373" width="6.5" height="15.0" fill="rgb(216,47,36)" rx="2" ry="2" />
<text  x="1134.11" y="383.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::dequeue&lt;kv::RDMAConnection*&gt; (527 samples, 0.19%)</title><rect x="112.6" y="309" width="2.3" height="15.0" fill="rgb(253,93,20)" rx="2" ry="2" />
<text  x="115.64" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (77 samples, 0.03%)</title><rect x="1042.0" y="293" width="0.3" height="15.0" fill="rgb(238,145,17)" rx="2" ry="2" />
<text  x="1044.96" y="303.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;&amp;&gt; (26 samples, 0.01%)</title><rect x="1135.0" y="277" width="0.1" height="15.0" fill="rgb(242,190,40)" rx="2" ry="2" />
<text  x="1137.96" y="287.5" ></text>
</g>
<g >
<title>x2apic_send_IPI_mask (78 samples, 0.03%)</title><rect x="1013.9" y="69" width="0.4" height="15.0" fill="rgb(211,12,28)" rx="2" ry="2" />
<text  x="1016.93" y="79.5" ></text>
</g>
<g >
<title>kv::LRUCache::DeleteNode (1,063 samples, 0.39%)</title><rect x="105.7" y="389" width="4.5" height="15.0" fill="rgb(253,42,43)" rx="2" ry="2" />
<text  x="108.67" y="399.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::enqueue (379 samples, 0.14%)</title><rect x="118.8" y="325" width="1.7" height="15.0" fill="rgb(233,14,21)" rx="2" ry="2" />
<text  x="121.83" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (616 samples, 0.22%)</title><rect x="801.8" y="357" width="2.7" height="15.0" fill="rgb(217,7,22)" rx="2" ry="2" />
<text  x="804.84" y="367.5" ></text>
</g>
<g >
<title>ibv_post_send (1,746 samples, 0.64%)</title><rect x="255.6" y="325" width="7.5" height="15.0" fill="rgb(223,159,19)" rx="2" ry="2" />
<text  x="258.65" y="335.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; (27 samples, 0.01%)</title><rect x="1065.0" y="389" width="0.2" height="15.0" fill="rgb(212,162,11)" rx="2" ry="2" />
<text  x="1068.04" y="399.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long const&amp;, false&gt;::_M_head (25 samples, 0.01%)</title><rect x="809.8" y="261" width="0.1" height="15.0" fill="rgb(217,19,30)" rx="2" ry="2" />
<text  x="812.79" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (382 samples, 0.14%)</title><rect x="1041.8" y="341" width="1.7" height="15.0" fill="rgb(224,148,8)" rx="2" ry="2" />
<text  x="1044.83" y="351.5" ></text>
</g>
<g >
<title>kv::Spinlock::unlock (1,775 samples, 0.65%)</title><rect x="999.1" y="389" width="7.6" height="15.0" fill="rgb(211,213,36)" rx="2" ry="2" />
<text  x="1002.12" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (177 samples, 0.06%)</title><rect x="1166.8" y="309" width="0.7" height="15.0" fill="rgb(231,196,13)" rx="2" ry="2" />
<text  x="1169.76" y="319.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (8,147 samples, 2.96%)</title><rect x="1085.9" y="357" width="34.9" height="15.0" fill="rgb(209,181,10)" rx="2" ry="2" />
<text  x="1088.86" y="367.5" >__..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (33 samples, 0.01%)</title><rect x="1178.8" y="549" width="0.2" height="15.0" fill="rgb(233,9,31)" rx="2" ry="2" />
<text  x="1181.84" y="559.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (66 samples, 0.02%)</title><rect x="1174.2" y="549" width="0.2" height="15.0" fill="rgb(207,65,3)" rx="2" ry="2" />
<text  x="1177.15" y="559.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.0 (173 samples, 0.06%)</title><rect x="1101.7" y="213" width="0.8" height="15.0" fill="rgb(251,171,50)" rx="2" ry="2" />
<text  x="1104.72" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::allocate (180 samples, 0.07%)</title><rect x="807.6" y="341" width="0.7" height="15.0" fill="rgb(213,202,53)" rx="2" ry="2" />
<text  x="810.56" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (164 samples, 0.06%)</title><rect x="1032.0" y="389" width="0.7" height="15.0" fill="rgb(245,165,3)" rx="2" ry="2" />
<text  x="1034.98" y="399.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (122 samples, 0.04%)</title><rect x="30.2" y="117" width="0.5" height="15.0" fill="rgb(254,228,39)" rx="2" ry="2" />
<text  x="33.17" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_ptr (29 samples, 0.01%)</title><rect x="1128.1" y="261" width="0.2" height="15.0" fill="rgb(250,215,16)" rx="2" ry="2" />
<text  x="1131.13" y="271.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,031 samples, 0.38%)</title><rect x="1097.1" y="229" width="4.5" height="15.0" fill="rgb(210,170,9)" rx="2" ry="2" />
<text  x="1100.13" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (412 samples, 0.15%)</title><rect x="164.6" y="309" width="1.7" height="15.0" fill="rgb(250,186,47)" rx="2" ry="2" />
<text  x="167.56" y="319.5" ></text>
</g>
<g >
<title>handle_mm_fault (183 samples, 0.07%)</title><rect x="1166.7" y="325" width="0.8" height="15.0" fill="rgb(220,26,45)" rx="2" ry="2" />
<text  x="1169.73" y="335.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (102 samples, 0.04%)</title><rect x="211.6" y="261" width="0.4" height="15.0" fill="rgb(228,152,22)" rx="2" ry="2" />
<text  x="214.59" y="271.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::FreeList&lt;moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::Block&gt;::try_get (49 samples, 0.02%)</title><rect x="205.1" y="261" width="0.2" height="15.0" fill="rgb(234,42,9)" rx="2" ry="2" />
<text  x="208.14" y="271.5" ></text>
</g>
<g >
<title>x2apic_send_IPI_mask (29 samples, 0.01%)</title><rect x="30.5" y="53" width="0.2" height="15.0" fill="rgb(221,32,39)" rx="2" ry="2" />
<text  x="33.54" y="63.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::try_dequeue&lt;kv::RDMAConnection*&gt; (804 samples, 0.29%)</title><rect x="1045.7" y="341" width="3.4" height="15.0" fill="rgb(254,128,26)" rx="2" ry="2" />
<text  x="1048.66" y="351.5" ></text>
</g>
<g >
<title>do_futex (2,651 samples, 0.96%)</title><rect x="1074.1" y="261" width="11.4" height="15.0" fill="rgb(234,132,47)" rx="2" ry="2" />
<text  x="1077.14" y="271.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::get_block_index_index_for_index (290 samples, 0.11%)</title><rect x="183.5" y="277" width="1.2" height="15.0" fill="rgb(250,18,46)" rx="2" ry="2" />
<text  x="186.46" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (136 samples, 0.05%)</title><rect x="152.7" y="277" width="0.5" height="15.0" fill="rgb(211,1,42)" rx="2" ry="2" />
<text  x="155.66" y="287.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (37 samples, 0.01%)</title><rect x="451.5" y="213" width="0.2" height="15.0" fill="rgb(235,200,38)" rx="2" ry="2" />
<text  x="454.54" y="223.5" ></text>
</g>
<g >
<title>hash_futex (216 samples, 0.08%)</title><rect x="691.2" y="245" width="0.9" height="15.0" fill="rgb(246,167,25)" rx="2" ry="2" />
<text  x="694.22" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (668 samples, 0.24%)</title><rect x="1127.7" y="325" width="2.8" height="15.0" fill="rgb(224,183,27)" rx="2" ry="2" />
<text  x="1130.65" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (194 samples, 0.07%)</title><rect x="1182.8" y="549" width="0.9" height="15.0" fill="rgb(227,134,2)" rx="2" ry="2" />
<text  x="1185.83" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (26 samples, 0.01%)</title><rect x="1182.1" y="565" width="0.1" height="15.0" fill="rgb(207,158,40)" rx="2" ry="2" />
<text  x="1185.11" y="575.5" ></text>
</g>
<g >
<title>do_page_fault (507 samples, 0.18%)</title><rect x="28.7" y="357" width="2.2" height="15.0" fill="rgb(252,6,54)" rx="2" ry="2" />
<text  x="31.72" y="367.5" ></text>
</g>
<g >
<title>std::mutex::unlock (8,175 samples, 2.97%)</title><rect x="1085.7" y="373" width="35.1" height="15.0" fill="rgb(250,152,28)" rx="2" ry="2" />
<text  x="1088.74" y="383.5" >st..</text>
</g>
<g >
<title>migrate_pages (138 samples, 0.05%)</title><rect x="1166.9" y="261" width="0.6" height="15.0" fill="rgb(249,175,38)" rx="2" ry="2" />
<text  x="1169.90" y="271.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1,582 samples, 0.58%)</title><rect x="1008.0" y="341" width="6.8" height="15.0" fill="rgb(245,225,3)" rx="2" ry="2" />
<text  x="1011.01" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (336 samples, 0.12%)</title><rect x="37.9" y="421" width="1.4" height="15.0" fill="rgb(250,224,45)" rx="2" ry="2" />
<text  x="40.85" y="431.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.19.35.0] (65 samples, 0.02%)</title><rect x="248.1" y="293" width="0.2" height="15.0" fill="rgb(234,206,25)" rx="2" ry="2" />
<text  x="251.07" y="303.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (32 samples, 0.01%)</title><rect x="151.0" y="309" width="0.1" height="15.0" fill="rgb(233,123,52)" rx="2" ry="2" />
<text  x="154.01" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned long&gt;, true&gt;::_S_cget (91 samples, 0.03%)</title><rect x="761.3" y="293" width="0.4" height="15.0" fill="rgb(235,188,15)" rx="2" ry="2" />
<text  x="764.30" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (559 samples, 0.20%)</title><rect x="1017.4" y="357" width="2.4" height="15.0" fill="rgb(234,27,5)" rx="2" ry="2" />
<text  x="1020.36" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (98 samples, 0.04%)</title><rect x="1178.1" y="565" width="0.4" height="15.0" fill="rgb(213,74,14)" rx="2" ry="2" />
<text  x="1181.11" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (34 samples, 0.01%)</title><rect x="1135.7" y="309" width="0.2" height="15.0" fill="rgb(227,219,37)" rx="2" ry="2" />
<text  x="1138.74" y="319.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (124 samples, 0.05%)</title><rect x="1040.5" y="293" width="0.6" height="15.0" fill="rgb(249,74,24)" rx="2" ry="2" />
<text  x="1043.53" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (575 samples, 0.21%)</title><rect x="1133.4" y="341" width="2.5" height="15.0" fill="rgb(210,152,7)" rx="2" ry="2" />
<text  x="1136.42" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (34 samples, 0.01%)</title><rect x="1182.2" y="565" width="0.2" height="15.0" fill="rgb(239,92,12)" rx="2" ry="2" />
<text  x="1185.22" y="575.5" ></text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (64 samples, 0.02%)</title><rect x="1040.1" y="309" width="0.3" height="15.0" fill="rgb(227,220,6)" rx="2" ry="2" />
<text  x="1043.10" y="319.5" ></text>
</g>
<g >
<title>try_to_unmap (606 samples, 0.22%)</title><rect x="1011.8" y="245" width="2.7" height="15.0" fill="rgb(250,83,51)" rx="2" ry="2" />
<text  x="1014.85" y="255.5" ></text>
</g>
<g >
<title>rmap_walk_anon (97 samples, 0.04%)</title><rect x="1167.1" y="213" width="0.4" height="15.0" fill="rgb(217,191,33)" rx="2" ry="2" />
<text  x="1170.08" y="223.5" ></text>
</g>
<g >
<title>remove_migration_pte (33 samples, 0.01%)</title><rect x="1011.7" y="197" width="0.1" height="15.0" fill="rgb(212,84,48)" rx="2" ry="2" />
<text  x="1014.68" y="207.5" ></text>
</g>
<g >
<title>moodycamel::details::hash_thread_id (220 samples, 0.08%)</title><rect x="209.8" y="293" width="1.0" height="15.0" fill="rgb(217,122,9)" rx="2" ry="2" />
<text  x="212.83" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (60 samples, 0.02%)</title><rect x="1043.2" y="309" width="0.2" height="15.0" fill="rgb(227,34,54)" rx="2" ry="2" />
<text  x="1046.16" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (423 samples, 0.15%)</title><rect x="1134.1" y="325" width="1.8" height="15.0" fill="rgb(246,146,41)" rx="2" ry="2" />
<text  x="1137.07" y="335.5" ></text>
</g>
<g >
<title>wake_q_add_safe (240 samples, 0.09%)</title><rect x="581.0" y="229" width="1.1" height="15.0" fill="rgb(210,105,24)" rx="2" ry="2" />
<text  x="584.04" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (26 samples, 0.01%)</title><rect x="740.6" y="293" width="0.1" height="15.0" fill="rgb(226,150,44)" rx="2" ry="2" />
<text  x="743.55" y="303.5" ></text>
</g>
<g >
<title>std::mutex::lock (34 samples, 0.01%)</title><rect x="1189.4" y="565" width="0.1" height="15.0" fill="rgb(240,110,46)" rx="2" ry="2" />
<text  x="1192.37" y="575.5" ></text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, std::ratio&lt;1l, 1000l&gt;, long, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (61 samples, 0.02%)</title><rect x="1040.1" y="293" width="0.3" height="15.0" fill="rgb(216,155,15)" rx="2" ry="2" />
<text  x="1043.11" y="303.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,924 samples, 0.70%)</title><rect x="510.1" y="245" width="8.3" height="15.0" fill="rgb(254,213,2)" rx="2" ry="2" />
<text  x="513.15" y="255.5" ></text>
</g>
<g >
<title>move_to_new_page (117 samples, 0.04%)</title><rect x="1011.0" y="245" width="0.5" height="15.0" fill="rgb(241,3,15)" rx="2" ry="2" />
<text  x="1014.03" y="255.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.19.35.0] (239 samples, 0.09%)</title><rect x="1037.7" y="293" width="1.1" height="15.0" fill="rgb(250,128,15)" rx="2" ry="2" />
<text  x="1040.74" y="303.5" ></text>
</g>
<g >
<title>pthread_spin_init (26 samples, 0.01%)</title><rect x="1055.1" y="293" width="0.1" height="15.0" fill="rgb(215,119,44)" rx="2" ry="2" />
<text  x="1058.05" y="303.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned int, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt; &gt;::find (68 samples, 0.02%)</title><rect x="1041.2" y="357" width="0.3" height="15.0" fill="rgb(243,229,5)" rx="2" ry="2" />
<text  x="1044.20" y="367.5" ></text>
</g>
<g >
<title>__put_page (43 samples, 0.02%)</title><rect x="1010.6" y="245" width="0.2" height="15.0" fill="rgb(206,99,24)" rx="2" ry="2" />
<text  x="1013.59" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;kv::ListNode*, kv::ListNode*&amp;, kv::ListNode**&gt;::_S_buffer_size (96 samples, 0.03%)</title><rect x="178.2" y="325" width="0.4" height="15.0" fill="rgb(208,121,24)" rx="2" ry="2" />
<text  x="181.16" y="335.5" ></text>
</g>
<g >
<title>std::operator&amp; (56 samples, 0.02%)</title><rect x="118.5" y="277" width="0.2" height="15.0" fill="rgb(249,8,21)" rx="2" ry="2" />
<text  x="121.50" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_lock (107 samples, 0.04%)</title><rect x="1074.4" y="229" width="0.5" height="15.0" fill="rgb(237,147,4)" rx="2" ry="2" />
<text  x="1077.44" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (28 samples, 0.01%)</title><rect x="1041.5" y="341" width="0.1" height="15.0" fill="rgb(253,52,30)" rx="2" ry="2" />
<text  x="1044.50" y="351.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (116 samples, 0.04%)</title><rect x="186.6" y="293" width="0.5" height="15.0" fill="rgb(220,29,29)" rx="2" ry="2" />
<text  x="189.59" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (91 samples, 0.03%)</title><rect x="1042.4" y="309" width="0.4" height="15.0" fill="rgb(207,55,17)" rx="2" ry="2" />
<text  x="1045.37" y="319.5" ></text>
</g>
<g >
<title>page_fault (24 samples, 0.01%)</title><rect x="1064.9" y="389" width="0.1" height="15.0" fill="rgb(226,114,24)" rx="2" ry="2" />
<text  x="1067.94" y="399.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::try_dequeue&lt;kv::RDMAConnection*&gt; (47 samples, 0.02%)</title><rect x="1177.5" y="565" width="0.2" height="15.0" fill="rgb(221,136,4)" rx="2" ry="2" />
<text  x="1180.49" y="575.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.19.35.0] (4,799 samples, 1.75%)</title><rect x="235.0" y="309" width="20.6" height="15.0" fill="rgb(251,186,10)" rx="2" ry="2" />
<text  x="238.04" y="319.5" ></text>
</g>
<g >
<title>page_fault (222 samples, 0.08%)</title><rect x="1166.6" y="389" width="1.0" height="15.0" fill="rgb(230,22,5)" rx="2" ry="2" />
<text  x="1169.60" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,902 samples, 0.69%)</title><rect x="770.5" y="341" width="8.2" height="15.0" fill="rgb(234,187,38)" rx="2" ry="2" />
<text  x="773.53" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (72 samples, 0.03%)</title><rect x="1120.9" y="373" width="0.3" height="15.0" fill="rgb(253,82,25)" rx="2" ry="2" />
<text  x="1123.91" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_remove_bucket_begin (67 samples, 0.02%)</title><rect x="159.2" y="309" width="0.3" height="15.0" fill="rgb(205,165,51)" rx="2" ry="2" />
<text  x="162.17" y="319.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::get_block_index_index_for_index (24 samples, 0.01%)</title><rect x="1035.4" y="261" width="0.1" height="15.0" fill="rgb(205,125,8)" rx="2" ry="2" />
<text  x="1038.39" y="271.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.0 (876 samples, 0.32%)</title><rect x="439.5" y="197" width="3.7" height="15.0" fill="rgb(251,176,8)" rx="2" ry="2" />
<text  x="442.45" y="207.5" ></text>
</g>
<g >
<title>__lll_lock_wait (21,107 samples, 7.68%)</title><rect x="366.1" y="325" width="90.6" height="15.0" fill="rgb(237,36,53)" rx="2" ry="2" />
<text  x="369.05" y="335.5" >__lll_lock..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (2,511 samples, 0.91%)</title><rect x="155.7" y="341" width="10.8" height="15.0" fill="rgb(208,97,45)" rx="2" ry="2" />
<text  x="158.72" y="351.5" ></text>
</g>
<g >
<title>page_fault (118 samples, 0.04%)</title><rect x="317.4" y="389" width="0.5" height="15.0" fill="rgb(236,170,47)" rx="2" ry="2" />
<text  x="320.38" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_addr (54 samples, 0.02%)</title><rect x="1170.9" y="549" width="0.3" height="15.0" fill="rgb(240,47,27)" rx="2" ry="2" />
<text  x="1173.93" y="559.5" ></text>
</g>
<g >
<title>do_user_addr_fault (214 samples, 0.08%)</title><rect x="1166.6" y="341" width="0.9" height="15.0" fill="rgb(228,84,52)" rx="2" ry="2" />
<text  x="1169.60" y="351.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::enqueue&lt; (44 samples, 0.02%)</title><rect x="1036.3" y="293" width="0.1" height="15.0" fill="rgb(243,51,50)" rx="2" ry="2" />
<text  x="1039.25" y="303.5" ></text>
</g>
<g >
<title>kv::ConnQue::enqueue (65 samples, 0.02%)</title><rect x="1036.2" y="341" width="0.3" height="15.0" fill="rgb(249,73,19)" rx="2" ry="2" />
<text  x="1039.25" y="351.5" ></text>
</g>
<g >
<title>std::atomic_flag::test_and_set (1,307 samples, 0.48%)</title><rect x="1159.7" y="373" width="5.6" height="15.0" fill="rgb(249,199,4)" rx="2" ry="2" />
<text  x="1162.68" y="383.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (134 samples, 0.05%)</title><rect x="30.1" y="149" width="0.6" height="15.0" fill="rgb(231,111,9)" rx="2" ry="2" />
<text  x="33.14" y="159.5" ></text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (75 samples, 0.03%)</title><rect x="1174.4" y="549" width="0.4" height="15.0" fill="rgb(208,146,11)" rx="2" ry="2" />
<text  x="1177.44" y="559.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,290 samples, 0.47%)</title><rect x="1009.3" y="325" width="5.5" height="15.0" fill="rgb(205,181,46)" rx="2" ry="2" />
<text  x="1012.26" y="335.5" ></text>
</g>
<g >
<title>moodycamel::details::_hash_32_or_64&lt;true&gt;::hash (27 samples, 0.01%)</title><rect x="1050.0" y="277" width="0.1" height="15.0" fill="rgb(224,98,12)" rx="2" ry="2" />
<text  x="1053.02" y="287.5" ></text>
</g>
<g >
<title>plist_del (32 samples, 0.01%)</title><rect x="580.8" y="213" width="0.1" height="15.0" fill="rgb(244,173,38)" rx="2" ry="2" />
<text  x="583.75" y="223.5" ></text>
</g>
<g >
<title>std::operator&amp; (106 samples, 0.04%)</title><rect x="1006.3" y="357" width="0.4" height="15.0" fill="rgb(229,79,47)" rx="2" ry="2" />
<text  x="1009.29" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (48 samples, 0.02%)</title><rect x="1041.3" y="309" width="0.2" height="15.0" fill="rgb(208,25,16)" rx="2" ry="2" />
<text  x="1044.26" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;::_M_valptr (31 samples, 0.01%)</title><rect x="316.6" y="261" width="0.1" height="15.0" fill="rgb(228,45,38)" rx="2" ry="2" />
<text  x="319.59" y="271.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (199 samples, 0.07%)</title><rect x="1039.2" y="293" width="0.8" height="15.0" fill="rgb(224,191,24)" rx="2" ry="2" />
<text  x="1042.15" y="303.5" ></text>
</g>
<g >
<title>std::operator&amp; (230 samples, 0.08%)</title><rect x="211.0" y="277" width="1.0" height="15.0" fill="rgb(220,34,44)" rx="2" ry="2" />
<text  x="214.04" y="287.5" ></text>
</g>
<g >
<title>try_to_wake_up (24,625 samples, 8.96%)</title><rect x="585.3" y="213" width="105.8" height="15.0" fill="rgb(229,39,47)" rx="2" ry="2" />
<text  x="588.34" y="223.5" >try_to_wake_up</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (25 samples, 0.01%)</title><rect x="1041.4" y="277" width="0.1" height="15.0" fill="rgb(222,42,18)" rx="2" ry="2" />
<text  x="1044.36" y="287.5" ></text>
</g>
<g >
<title>do_page_fault (24 samples, 0.01%)</title><rect x="1064.9" y="373" width="0.1" height="15.0" fill="rgb(210,130,25)" rx="2" ry="2" />
<text  x="1067.94" y="383.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::get_block_index_entry_for_index (90 samples, 0.03%)</title><rect x="113.6" y="277" width="0.4" height="15.0" fill="rgb(222,181,3)" rx="2" ry="2" />
<text  x="116.58" y="287.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::store (669 samples, 0.24%)</title><rect x="205.9" y="293" width="2.9" height="15.0" fill="rgb(245,165,53)" rx="2" ry="2" />
<text  x="208.93" y="303.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (49 samples, 0.02%)</title><rect x="1172.0" y="549" width="0.2" height="15.0" fill="rgb(252,70,25)" rx="2" ry="2" />
<text  x="1175.03" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (112 samples, 0.04%)</title><rect x="785.1" y="325" width="0.4" height="15.0" fill="rgb(246,137,33)" rx="2" ry="2" />
<text  x="788.06" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (497 samples, 0.18%)</title><rect x="312.7" y="309" width="2.2" height="15.0" fill="rgb(209,226,10)" rx="2" ry="2" />
<text  x="315.73" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (41 samples, 0.01%)</title><rect x="153.6" y="309" width="0.1" height="15.0" fill="rgb(208,220,2)" rx="2" ry="2" />
<text  x="156.57" y="319.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (48 samples, 0.02%)</title><rect x="1062.7" y="293" width="0.2" height="15.0" fill="rgb(217,129,21)" rx="2" ry="2" />
<text  x="1065.72" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (119 samples, 0.04%)</title><rect x="771.8" y="309" width="0.5" height="15.0" fill="rgb(236,84,15)" rx="2" ry="2" />
<text  x="774.79" y="319.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long const&amp;&gt;::tuple (113 samples, 0.04%)</title><rect x="809.4" y="309" width="0.5" height="15.0" fill="rgb(249,67,47)" rx="2" ry="2" />
<text  x="812.45" y="319.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::find (16,230 samples, 5.91%)</title><rect x="695.4" y="389" width="69.7" height="15.0" fill="rgb(211,197,20)" rx="2" ry="2" />
<text  x="698.42" y="399.5" >std::un..</text>
</g>
<g >
<title>clear_page_erms (35 samples, 0.01%)</title><rect x="1010.8" y="197" width="0.1" height="15.0" fill="rgb(244,217,36)" rx="2" ry="2" />
<text  x="1013.78" y="207.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;::count (111 samples, 0.04%)</title><rect x="143.0" y="309" width="0.5" height="15.0" fill="rgb(254,172,35)" rx="2" ry="2" />
<text  x="145.99" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (79 samples, 0.03%)</title><rect x="309.2" y="309" width="0.3" height="15.0" fill="rgb(219,54,20)" rx="2" ry="2" />
<text  x="312.19" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (412 samples, 0.15%)</title><rect x="1179.6" y="565" width="1.8" height="15.0" fill="rgb(218,205,52)" rx="2" ry="2" />
<text  x="1182.58" y="575.5" ></text>
</g>
<g >
<title>std::mutex::unlock (80 samples, 0.03%)</title><rect x="308.0" y="357" width="0.3" height="15.0" fill="rgb(209,0,43)" rx="2" ry="2" />
<text  x="310.96" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::allocate (27 samples, 0.01%)</title><rect x="1137.2" y="341" width="0.1" height="15.0" fill="rgb(231,192,36)" rx="2" ry="2" />
<text  x="1140.21" y="351.5" ></text>
</g>
<g >
<title>migrate_page_states (43 samples, 0.02%)</title><rect x="1011.3" y="197" width="0.2" height="15.0" fill="rgb(207,215,24)" rx="2" ry="2" />
<text  x="1014.34" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,265 samples, 0.82%)</title><rect x="1121.3" y="373" width="9.7" height="15.0" fill="rgb(226,185,11)" rx="2" ry="2" />
<text  x="1124.30" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (87 samples, 0.03%)</title><rect x="153.7" y="325" width="0.4" height="15.0" fill="rgb(222,172,20)" rx="2" ry="2" />
<text  x="156.74" y="335.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (108 samples, 0.04%)</title><rect x="30.2" y="101" width="0.5" height="15.0" fill="rgb(208,23,43)" rx="2" ry="2" />
<text  x="33.20" y="111.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned int, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt; &gt;::end (34 samples, 0.01%)</title><rect x="308.3" y="373" width="0.2" height="15.0" fill="rgb(247,24,31)" rx="2" ry="2" />
<text  x="311.31" y="383.5" ></text>
</g>
<g >
<title>__x2apic_send_IPI_mask (29 samples, 0.01%)</title><rect x="30.5" y="37" width="0.2" height="15.0" fill="rgb(253,191,23)" rx="2" ry="2" />
<text  x="33.54" y="47.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long const, kv::ListNode*&gt; (78 samples, 0.03%)</title><rect x="1186.5" y="549" width="0.3" height="15.0" fill="rgb(235,192,24)" rx="2" ry="2" />
<text  x="1189.46" y="559.5" ></text>
</g>
<g >
<title>kv::ConnectionManager::remote_read (29,187 samples, 10.62%)</title><rect x="178.7" y="373" width="125.3" height="15.0" fill="rgb(231,75,33)" rx="2" ry="2" />
<text  x="181.71" y="383.5" >kv::ConnectionM..</text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;::duration&lt;long, void&gt; (59 samples, 0.02%)</title><rect x="145.5" y="277" width="0.2" height="15.0" fill="rgb(237,196,44)" rx="2" ry="2" />
<text  x="148.46" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (38 samples, 0.01%)</title><rect x="1179.1" y="549" width="0.1" height="15.0" fill="rgb(252,96,33)" rx="2" ry="2" />
<text  x="1182.05" y="559.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (505 samples, 0.18%)</title><rect x="1012.3" y="149" width="2.1" height="15.0" fill="rgb(216,7,11)" rx="2" ry="2" />
<text  x="1015.27" y="159.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::dequeue&lt;kv::RDMAConnection*&gt; (500 samples, 0.18%)</title><rect x="112.8" y="293" width="2.1" height="15.0" fill="rgb(240,194,13)" rx="2" ry="2" />
<text  x="115.76" y="303.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (103 samples, 0.04%)</title><rect x="1035.8" y="293" width="0.4" height="15.0" fill="rgb(223,162,10)" rx="2" ry="2" />
<text  x="1038.81" y="303.5" ></text>
</g>
<g >
<title>__do_page_fault (24 samples, 0.01%)</title><rect x="1064.9" y="357" width="0.1" height="15.0" fill="rgb(211,152,12)" rx="2" ry="2" />
<text  x="1067.94" y="367.5" ></text>
</g>
<g >
<title>llist_add_batch (102 samples, 0.04%)</title><rect x="1012.4" y="101" width="0.4" height="15.0" fill="rgb(233,162,46)" rx="2" ry="2" />
<text  x="1015.40" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (46 samples, 0.02%)</title><rect x="158.9" y="277" width="0.2" height="15.0" fill="rgb(247,148,17)" rx="2" ry="2" />
<text  x="161.95" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (4,267 samples, 1.55%)</title><rect x="741.8" y="309" width="18.3" height="15.0" fill="rgb(206,51,52)" rx="2" ry="2" />
<text  x="744.81" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (58 samples, 0.02%)</title><rect x="151.4" y="325" width="0.3" height="15.0" fill="rgb(251,87,41)" rx="2" ry="2" />
<text  x="154.41" y="335.5" ></text>
</g>
<g >
<title>[rdma_client] (30 samples, 0.01%)</title><rect x="1017.2" y="357" width="0.2" height="15.0" fill="rgb(228,39,15)" rx="2" ry="2" />
<text  x="1020.23" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false, false&gt;::_Node_iterator (36 samples, 0.01%)</title><rect x="1130.9" y="357" width="0.1" height="15.0" fill="rgb(243,191,32)" rx="2" ry="2" />
<text  x="1133.88" y="367.5" ></text>
</g>
<g >
<title>rmap_walk (51 samples, 0.02%)</title><rect x="1011.6" y="229" width="0.2" height="15.0" fill="rgb(205,25,14)" rx="2" ry="2" />
<text  x="1014.63" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (680 samples, 0.25%)</title><rect x="1121.7" y="357" width="2.9" height="15.0" fill="rgb(237,106,30)" rx="2" ry="2" />
<text  x="1124.72" y="367.5" ></text>
</g>
<g >
<title>[[vdso]] (1,102 samples, 0.40%)</title><rect x="138.3" y="261" width="4.7" height="15.0" fill="rgb(236,198,22)" rx="2" ry="2" />
<text  x="141.26" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (171 samples, 0.06%)</title><rect x="1063.9" y="325" width="0.7" height="15.0" fill="rgb(218,206,9)" rx="2" ry="2" />
<text  x="1066.88" y="335.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::enqueue&lt; (1,048 samples, 0.38%)</title><rect x="204.4" y="309" width="4.5" height="15.0" fill="rgb(221,169,10)" rx="2" ry="2" />
<text  x="207.37" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (140 samples, 0.05%)</title><rect x="1178.8" y="565" width="0.6" height="15.0" fill="rgb(222,75,48)" rx="2" ry="2" />
<text  x="1181.84" y="575.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (127 samples, 0.05%)</title><rect x="205.4" y="293" width="0.5" height="15.0" fill="rgb(218,101,47)" rx="2" ry="2" />
<text  x="208.39" y="303.5" ></text>
</g>
<g >
<title>change_protection (56 samples, 0.02%)</title><rect x="692.5" y="213" width="0.2" height="15.0" fill="rgb(231,156,12)" rx="2" ry="2" />
<text  x="695.47" y="223.5" ></text>
</g>
<g >
<title>pthread_spin_lock (31 samples, 0.01%)</title><rect x="1038.9" y="277" width="0.2" height="15.0" fill="rgb(250,189,3)" rx="2" ry="2" />
<text  x="1041.93" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (40 samples, 0.01%)</title><rect x="1128.1" y="277" width="0.2" height="15.0" fill="rgb(239,55,15)" rx="2" ry="2" />
<text  x="1131.08" y="287.5" ></text>
</g>
<g >
<title>start_thread (270,326 samples, 98.37%)</title><rect x="10.1" y="549" width="1160.8" height="15.0" fill="rgb(205,176,32)" rx="2" ry="2" />
<text  x="13.13" y="559.5" >start_thread</text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (40 samples, 0.01%)</title><rect x="20.7" y="405" width="0.2" height="15.0" fill="rgb(251,36,49)" rx="2" ry="2" />
<text  x="23.71" y="415.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (50 samples, 0.02%)</title><rect x="1060.9" y="293" width="0.2" height="15.0" fill="rgb(239,44,39)" rx="2" ry="2" />
<text  x="1063.86" y="303.5" ></text>
</g>
<g >
<title>[rdma_client] (42 samples, 0.02%)</title><rect x="1016.6" y="373" width="0.1" height="15.0" fill="rgb(211,117,37)" rx="2" ry="2" />
<text  x="1019.57" y="383.5" ></text>
</g>
<g >
<title>std::queue&lt;kv::ListNode*, std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt; &gt;::push (308 samples, 0.11%)</title><rect x="154.2" y="373" width="1.4" height="15.0" fill="rgb(240,62,19)" rx="2" ry="2" />
<text  x="157.24" y="383.5" ></text>
</g>
<g >
<title>change_protection_range (116 samples, 0.04%)</title><rect x="1020.0" y="277" width="0.5" height="15.0" fill="rgb(224,208,31)" rx="2" ry="2" />
<text  x="1023.02" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_M_head (50 samples, 0.02%)</title><rect x="809.7" y="277" width="0.2" height="15.0" fill="rgb(233,114,11)" rx="2" ry="2" />
<text  x="812.68" y="287.5" ></text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, std::ratio&lt;1l, 1000l&gt;, long, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (73 samples, 0.03%)</title><rect x="1186.9" y="565" width="0.3" height="15.0" fill="rgb(216,55,42)" rx="2" ry="2" />
<text  x="1189.90" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (40 samples, 0.01%)</title><rect x="1181.4" y="565" width="0.1" height="15.0" fill="rgb(238,80,19)" rx="2" ry="2" />
<text  x="1184.35" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (84 samples, 0.03%)</title><rect x="315.7" y="309" width="0.4" height="15.0" fill="rgb(231,45,15)" rx="2" ry="2" />
<text  x="318.69" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt;::_Node_iterator_base (120 samples, 0.04%)</title><rect x="764.6" y="341" width="0.5" height="15.0" fill="rgb(248,210,16)" rx="2" ry="2" />
<text  x="767.60" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (403 samples, 0.15%)</title><rect x="29.1" y="309" width="1.8" height="15.0" fill="rgb(212,198,48)" rx="2" ry="2" />
<text  x="32.13" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (95 samples, 0.03%)</title><rect x="1181.6" y="549" width="0.4" height="15.0" fill="rgb(205,111,22)" rx="2" ry="2" />
<text  x="1184.59" y="559.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (411 samples, 0.15%)</title><rect x="1047.3" y="309" width="1.8" height="15.0" fill="rgb(212,193,1)" rx="2" ry="2" />
<text  x="1050.30" y="319.5" ></text>
</g>
<g >
<title>do_page_fault (118 samples, 0.04%)</title><rect x="317.4" y="373" width="0.5" height="15.0" fill="rgb(209,28,8)" rx="2" ry="2" />
<text  x="320.38" y="383.5" ></text>
</g>
<g >
<title>kv::ConnectionManager::remote_read (4,102 samples, 1.49%)</title><rect x="1045.6" y="373" width="17.6" height="15.0" fill="rgb(225,197,31)" rx="2" ry="2" />
<text  x="1048.61" y="383.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (51 samples, 0.02%)</title><rect x="1189.5" y="549" width="0.2" height="15.0" fill="rgb(242,208,49)" rx="2" ry="2" />
<text  x="1192.52" y="559.5" ></text>
</g>
<g >
<title>kv::RDMAConnection::rdma_remote_write (5,840 samples, 2.13%)</title><rect x="125.6" y="325" width="25.1" height="15.0" fill="rgb(209,72,15)" rx="2" ry="2" />
<text  x="128.63" y="335.5" >k..</text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::FreeList&lt;moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::Block&gt;::add (31 samples, 0.01%)</title><rect x="184.7" y="277" width="0.1" height="15.0" fill="rgb(222,183,41)" rx="2" ry="2" />
<text  x="187.70" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (496 samples, 0.18%)</title><rect x="31.7" y="373" width="2.2" height="15.0" fill="rgb(241,156,17)" rx="2" ry="2" />
<text  x="34.75" y="383.5" ></text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (233 samples, 0.08%)</title><rect x="1060.2" y="325" width="1.0" height="15.0" fill="rgb(251,97,37)" rx="2" ry="2" />
<text  x="1063.18" y="335.5" ></text>
</g>
<g >
<title>pthread_spin_init (54 samples, 0.02%)</title><rect x="132.6" y="277" width="0.2" height="15.0" fill="rgb(218,3,20)" rx="2" ry="2" />
<text  x="135.61" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false, false&gt;::_Node_iterator (53 samples, 0.02%)</title><rect x="1179.2" y="549" width="0.2" height="15.0" fill="rgb(207,75,1)" rx="2" ry="2" />
<text  x="1182.21" y="559.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (617 samples, 0.22%)</title><rect x="1057.3" y="325" width="2.7" height="15.0" fill="rgb(238,55,13)" rx="2" ry="2" />
<text  x="1060.30" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (186 samples, 0.07%)</title><rect x="796.5" y="309" width="0.8" height="15.0" fill="rgb(218,172,33)" rx="2" ry="2" />
<text  x="799.46" y="319.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (102 samples, 0.04%)</title><rect x="211.6" y="245" width="0.4" height="15.0" fill="rgb(233,196,39)" rx="2" ry="2" />
<text  x="214.59" y="255.5" ></text>
</g>
<g >
<title>migrate_pages (260 samples, 0.09%)</title><rect x="29.6" y="245" width="1.1" height="15.0" fill="rgb(219,112,37)" rx="2" ry="2" />
<text  x="32.60" y="255.5" ></text>
</g>
<g >
<title>page_vma_mapped_walk (26 samples, 0.01%)</title><rect x="1012.0" y="181" width="0.1" height="15.0" fill="rgb(227,219,8)" rx="2" ry="2" />
<text  x="1015.00" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (481 samples, 0.18%)</title><rect x="789.1" y="277" width="2.1" height="15.0" fill="rgb(250,125,1)" rx="2" ry="2" />
<text  x="792.09" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned int, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt; &gt;::operator[] (29 samples, 0.01%)</title><rect x="1041.5" y="357" width="0.1" height="15.0" fill="rgb(208,61,12)" rx="2" ry="2" />
<text  x="1044.49" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (561 samples, 0.20%)</title><rect x="156.8" y="293" width="2.4" height="15.0" fill="rgb(238,92,2)" rx="2" ry="2" />
<text  x="159.76" y="303.5" ></text>
</g>
<g >
<title>kv::RDMAMemPool::get_rkey (398 samples, 0.14%)</title><rect x="1063.2" y="389" width="1.7" height="15.0" fill="rgb(213,30,31)" rx="2" ry="2" />
<text  x="1066.23" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned int, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt; &gt;::find (213 samples, 0.08%)</title><rect x="1063.7" y="373" width="0.9" height="15.0" fill="rgb(243,113,53)" rx="2" ry="2" />
<text  x="1066.71" y="383.5" ></text>
</g>
<g >
<title>[rdma_client] (105 samples, 0.04%)</title><rect x="35.6" y="421" width="0.5" height="15.0" fill="rgb(221,143,42)" rx="2" ry="2" />
<text  x="38.62" y="431.5" ></text>
</g>
<g >
<title>__handle_mm_fault (56 samples, 0.02%)</title><rect x="317.6" y="309" width="0.3" height="15.0" fill="rgb(218,18,7)" rx="2" ry="2" />
<text  x="320.61" y="319.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::Block::set_empty&lt; (71 samples, 0.03%)</title><rect x="113.3" y="277" width="0.3" height="15.0" fill="rgb(235,229,53)" rx="2" ry="2" />
<text  x="116.28" y="287.5" ></text>
</g>
<g >
<title>drop_futex_key_refs.isra.0 (25 samples, 0.01%)</title><rect x="518.4" y="245" width="0.1" height="15.0" fill="rgb(251,157,31)" rx="2" ry="2" />
<text  x="521.41" y="255.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;&amp;&gt; (36 samples, 0.01%)</title><rect x="1128.4" y="277" width="0.1" height="15.0" fill="rgb(248,170,13)" rx="2" ry="2" />
<text  x="1131.36" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (64 samples, 0.02%)</title><rect x="1178.6" y="565" width="0.2" height="15.0" fill="rgb(228,191,54)" rx="2" ry="2" />
<text  x="1181.55" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,936 samples, 0.70%)</title><rect x="710.1" y="341" width="8.3" height="15.0" fill="rgb(205,5,7)" rx="2" ry="2" />
<text  x="713.07" y="351.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1,163 samples, 0.42%)</title><rect x="145.7" y="309" width="5.0" height="15.0" fill="rgb(252,43,21)" rx="2" ry="2" />
<text  x="148.72" y="319.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (40 samples, 0.01%)</title><rect x="113.7" y="245" width="0.2" height="15.0" fill="rgb(217,226,45)" rx="2" ry="2" />
<text  x="116.71" y="255.5" ></text>
</g>
<g >
<title>operator new (694 samples, 0.25%)</title><rect x="30.9" y="389" width="3.0" height="15.0" fill="rgb(228,8,38)" rx="2" ry="2" />
<text  x="33.90" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (385 samples, 0.14%)</title><rect x="1041.8" y="357" width="1.7" height="15.0" fill="rgb(226,90,46)" rx="2" ry="2" />
<text  x="1044.81" y="367.5" ></text>
</g>
<g >
<title>do_page_fault (56 samples, 0.02%)</title><rect x="105.4" y="357" width="0.3" height="15.0" fill="rgb(208,12,16)" rx="2" ry="2" />
<text  x="108.43" y="367.5" ></text>
</g>
<g >
<title>std::mutex::lock (41 samples, 0.01%)</title><rect x="151.0" y="341" width="0.2" height="15.0" fill="rgb(228,84,54)" rx="2" ry="2" />
<text  x="153.98" y="351.5" ></text>
</g>
<g >
<title>_raw_spin_lock (8,795 samples, 3.20%)</title><rect x="401.2" y="213" width="37.8" height="15.0" fill="rgb(247,175,43)" rx="2" ry="2" />
<text  x="404.20" y="223.5" >_ra..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (78 samples, 0.03%)</title><rect x="1177.7" y="549" width="0.3" height="15.0" fill="rgb(224,141,36)" rx="2" ry="2" />
<text  x="1180.69" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long const, kv::ListNode*&gt; (55 samples, 0.02%)</title><rect x="1135.1" y="277" width="0.2" height="15.0" fill="rgb(249,122,16)" rx="2" ry="2" />
<text  x="1138.07" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (2,283 samples, 0.83%)</title><rect x="786.7" y="309" width="9.8" height="15.0" fill="rgb(237,194,13)" rx="2" ry="2" />
<text  x="789.66" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (89 samples, 0.03%)</title><rect x="1170.5" y="421" width="0.4" height="15.0" fill="rgb(227,144,45)" rx="2" ry="2" />
<text  x="1173.54" y="431.5" ></text>
</g>
<g >
<title>kv::Spinlock::unlock (375 samples, 0.14%)</title><rect x="1175.2" y="549" width="1.6" height="15.0" fill="rgb(205,72,2)" rx="2" ry="2" />
<text  x="1178.21" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (220 samples, 0.08%)</title><rect x="1132.0" y="325" width="1.0" height="15.0" fill="rgb(235,176,29)" rx="2" ry="2" />
<text  x="1135.05" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1,325 samples, 0.48%)</title><rect x="156.5" y="325" width="5.6" height="15.0" fill="rgb(216,62,39)" rx="2" ry="2" />
<text  x="159.46" y="335.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (54 samples, 0.02%)</title><rect x="1188.1" y="549" width="0.3" height="15.0" fill="rgb(214,152,32)" rx="2" ry="2" />
<text  x="1191.15" y="559.5" ></text>
</g>
<g >
<title>try_to_unmap_one (584 samples, 0.21%)</title><rect x="1011.9" y="197" width="2.5" height="15.0" fill="rgb(208,114,19)" rx="2" ry="2" />
<text  x="1014.93" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,468 samples, 0.53%)</title><rect x="772.3" y="325" width="6.3" height="15.0" fill="rgb(216,177,27)" rx="2" ry="2" />
<text  x="775.31" y="335.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::enqueue (2,173 samples, 0.79%)</title><rect x="204.1" y="341" width="9.3" height="15.0" fill="rgb(237,96,44)" rx="2" ry="2" />
<text  x="207.07" y="351.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (533 samples, 0.19%)</title><rect x="1012.1" y="165" width="2.3" height="15.0" fill="rgb(246,37,30)" rx="2" ry="2" />
<text  x="1015.15" y="175.5" ></text>
</g>
<g >
<title>std::error_code::default_error_condition (270,326 samples, 98.37%)</title><rect x="10.1" y="533" width="1160.8" height="15.0" fill="rgb(218,219,47)" rx="2" ry="2" />
<text  x="13.13" y="543.5" >std::error_code::default_error_condition</text>
</g>
<g >
<title>__gthread_mutex_unlock (54,721 samples, 19.91%)</title><rect x="458.3" y="357" width="234.9" height="15.0" fill="rgb(246,186,18)" rx="2" ry="2" />
<text  x="461.27" y="367.5" >__gthread_mutex_unlock</text>
</g>
<g >
<title>migrate_page (115 samples, 0.04%)</title><rect x="1011.0" y="229" width="0.5" height="15.0" fill="rgb(249,3,23)" rx="2" ry="2" />
<text  x="1014.04" y="239.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::requisition_block&lt; (52 samples, 0.02%)</title><rect x="205.1" y="293" width="0.3" height="15.0" fill="rgb(243,200,37)" rx="2" ry="2" />
<text  x="208.13" y="303.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (116 samples, 0.04%)</title><rect x="1020.0" y="373" width="0.5" height="15.0" fill="rgb(244,69,14)" rx="2" ry="2" />
<text  x="1023.02" y="383.5" ></text>
</g>
<g >
<title>kv::hash_map_t::find (48,942 samples, 17.81%)</title><rect x="810.4" y="405" width="210.1" height="15.0" fill="rgb(240,75,31)" rx="2" ry="2" />
<text  x="813.36" y="415.5" >kv::hash_map_t::find</text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (60 samples, 0.02%)</title><rect x="1187.7" y="549" width="0.2" height="15.0" fill="rgb(210,216,0)" rx="2" ry="2" />
<text  x="1190.68" y="559.5" ></text>
</g>
<g >
<title>migrate_misplaced_page (1,025 samples, 0.37%)</title><rect x="1010.2" y="277" width="4.4" height="15.0" fill="rgb(242,153,29)" rx="2" ry="2" />
<text  x="1013.24" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;::_M_v (30 samples, 0.01%)</title><rect x="317.2" y="341" width="0.2" height="15.0" fill="rgb(209,121,45)" rx="2" ry="2" />
<text  x="320.25" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (73 samples, 0.03%)</title><rect x="313.0" y="277" width="0.3" height="15.0" fill="rgb(234,62,17)" rx="2" ry="2" />
<text  x="315.97" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (28 samples, 0.01%)</title><rect x="1019.8" y="373" width="0.1" height="15.0" fill="rgb(229,57,9)" rx="2" ry="2" />
<text  x="1022.76" y="383.5" ></text>
</g>
<g >
<title>[rdma_client] (34 samples, 0.01%)</title><rect x="82.0" y="389" width="0.1" height="15.0" fill="rgb(232,21,33)" rx="2" ry="2" />
<text  x="84.97" y="399.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::dequeue&lt;kv::RDMAConnection*&gt; (243 samples, 0.09%)</title><rect x="1045.8" y="325" width="1.1" height="15.0" fill="rgb(208,228,15)" rx="2" ry="2" />
<text  x="1048.84" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (4,509 samples, 1.64%)</title><rect x="699.0" y="357" width="19.4" height="15.0" fill="rgb(238,112,5)" rx="2" ry="2" />
<text  x="702.02" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (588 samples, 0.21%)</title><rect x="159.5" y="309" width="2.6" height="15.0" fill="rgb(230,14,7)" rx="2" ry="2" />
<text  x="162.53" y="319.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::get_block_index_index_for_index (87 samples, 0.03%)</title><rect x="113.6" y="261" width="0.4" height="15.0" fill="rgb(221,35,11)" rx="2" ry="2" />
<text  x="116.59" y="271.5" ></text>
</g>
<g >
<title>kv::ListNode::remote_read (29,219 samples, 10.63%)</title><rect x="178.6" y="389" width="125.4" height="15.0" fill="rgb(224,43,38)" rx="2" ry="2" />
<text  x="181.58" y="399.5" >kv::ListNode::r..</text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (110 samples, 0.04%)</title><rect x="1187.2" y="565" width="0.5" height="15.0" fill="rgb(217,221,52)" rx="2" ry="2" />
<text  x="1190.21" y="575.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (69 samples, 0.03%)</title><rect x="1172.2" y="549" width="0.3" height="15.0" fill="rgb(245,177,17)" rx="2" ry="2" />
<text  x="1175.24" y="559.5" ></text>
</g>
<g >
<title>kv::RDMAConnection::rdma_remote_write (59 samples, 0.02%)</title><rect x="1174.8" y="565" width="0.2" height="15.0" fill="rgb(209,17,12)" rx="2" ry="2" />
<text  x="1177.76" y="575.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long const, kv::ListNode*&gt; (27 samples, 0.01%)</title><rect x="1188.4" y="549" width="0.1" height="15.0" fill="rgb(213,172,51)" rx="2" ry="2" />
<text  x="1191.42" y="559.5" ></text>
</g>
<g >
<title>kv::ConnQue::dequeue (261 samples, 0.09%)</title><rect x="1035.1" y="341" width="1.1" height="15.0" fill="rgb(213,72,3)" rx="2" ry="2" />
<text  x="1038.13" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt;::push_back (282 samples, 0.10%)</title><rect x="154.3" y="357" width="1.3" height="15.0" fill="rgb(238,226,43)" rx="2" ry="2" />
<text  x="157.35" y="367.5" ></text>
</g>
<g >
<title>ibv_poll_cq (293 samples, 0.11%)</title><rect x="1037.5" y="309" width="1.3" height="15.0" fill="rgb(208,201,2)" rx="2" ry="2" />
<text  x="1040.51" y="319.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::next_prod (24 samples, 0.01%)</title><rect x="1046.9" y="325" width="0.1" height="15.0" fill="rgb(217,100,1)" rx="2" ry="2" />
<text  x="1049.88" y="335.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (58 samples, 0.02%)</title><rect x="308.0" y="325" width="0.3" height="15.0" fill="rgb(239,140,6)" rx="2" ry="2" />
<text  x="311.05" y="335.5" ></text>
</g>
<g >
<title>operator new (128 samples, 0.05%)</title><rect x="807.8" y="309" width="0.5" height="15.0" fill="rgb(251,170,25)" rx="2" ry="2" />
<text  x="810.78" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (115 samples, 0.04%)</title><rect x="1128.3" y="293" width="0.4" height="15.0" fill="rgb(254,208,12)" rx="2" ry="2" />
<text  x="1131.26" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_futex (2,676 samples, 0.97%)</title><rect x="1074.1" y="277" width="11.5" height="15.0" fill="rgb(238,147,22)" rx="2" ry="2" />
<text  x="1077.06" y="287.5" ></text>
</g>
<g >
<title>hash_futex (198 samples, 0.07%)</title><rect x="452.1" y="229" width="0.8" height="15.0" fill="rgb(208,80,37)" rx="2" ry="2" />
<text  x="455.08" y="239.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::store (86 samples, 0.03%)</title><rect x="1049.4" y="293" width="0.4" height="15.0" fill="rgb(214,185,14)" rx="2" ry="2" />
<text  x="1052.38" y="303.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.0 (119 samples, 0.04%)</title><rect x="1083.1" y="197" width="0.5" height="15.0" fill="rgb(246,0,47)" rx="2" ry="2" />
<text  x="1086.13" y="207.5" ></text>
</g>
<g >
<title>moodycamel::details::thread_id_converter&lt;unsigned long&gt;::prehash (51 samples, 0.02%)</title><rect x="210.6" y="277" width="0.2" height="15.0" fill="rgb(249,4,16)" rx="2" ry="2" />
<text  x="213.55" y="287.5" ></text>
</g>
<g >
<title>kv::hashcode1B (295 samples, 0.11%)</title><rect x="1006.7" y="389" width="1.3" height="15.0" fill="rgb(246,75,38)" rx="2" ry="2" />
<text  x="1009.74" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (605 samples, 0.22%)</title><rect x="1127.8" y="309" width="2.6" height="15.0" fill="rgb(230,207,21)" rx="2" ry="2" />
<text  x="1130.76" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (2,930 samples, 1.07%)</title><rect x="785.6" y="325" width="12.6" height="15.0" fill="rgb(212,227,42)" rx="2" ry="2" />
<text  x="788.57" y="335.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (128 samples, 0.05%)</title><rect x="183.8" y="261" width="0.6" height="15.0" fill="rgb(226,149,19)" rx="2" ry="2" />
<text  x="186.85" y="271.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (73 samples, 0.03%)</title><rect x="1063.3" y="325" width="0.3" height="15.0" fill="rgb(229,152,20)" rx="2" ry="2" />
<text  x="1066.33" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (29 samples, 0.01%)</title><rect x="31.6" y="373" width="0.1" height="15.0" fill="rgb(216,206,52)" rx="2" ry="2" />
<text  x="34.62" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt;::size (76 samples, 0.03%)</title><rect x="1045.3" y="357" width="0.3" height="15.0" fill="rgb(237,43,7)" rx="2" ry="2" />
<text  x="1048.28" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (44,495 samples, 16.19%)</title><rect x="501.6" y="293" width="191.1" height="15.0" fill="rgb(254,194,24)" rx="2" ry="2" />
<text  x="504.65" y="303.5" >do_syscall_64</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (133 samples, 0.05%)</title><rect x="1135.9" y="357" width="0.6" height="15.0" fill="rgb(226,88,49)" rx="2" ry="2" />
<text  x="1138.89" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (174 samples, 0.06%)</title><rect x="1063.9" y="341" width="0.7" height="15.0" fill="rgb(214,125,10)" rx="2" ry="2" />
<text  x="1066.87" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long const, kv::ListNode*&gt; (45 samples, 0.02%)</title><rect x="801.3" y="277" width="0.2" height="15.0" fill="rgb(241,179,38)" rx="2" ry="2" />
<text  x="804.30" y="287.5" ></text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (30 samples, 0.01%)</title><rect x="1174.9" y="549" width="0.1" height="15.0" fill="rgb(213,155,2)" rx="2" ry="2" />
<text  x="1177.89" y="559.5" ></text>
</g>
<g >
<title>change_protection (116 samples, 0.04%)</title><rect x="1020.0" y="293" width="0.5" height="15.0" fill="rgb(242,108,41)" rx="2" ry="2" />
<text  x="1023.02" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_futex (31 samples, 0.01%)</title><rect x="1092.8" y="293" width="0.1" height="15.0" fill="rgb(211,88,18)" rx="2" ry="2" />
<text  x="1095.80" y="303.5" ></text>
</g>
<g >
<title>__x2apic_send_IPI_mask (78 samples, 0.03%)</title><rect x="1013.9" y="53" width="0.4" height="15.0" fill="rgb(251,39,53)" rx="2" ry="2" />
<text  x="1016.93" y="63.5" ></text>
</g>
<g >
<title>migrate_pages (79 samples, 0.03%)</title><rect x="1169.9" y="293" width="0.4" height="15.0" fill="rgb(236,85,23)" rx="2" ry="2" />
<text  x="1172.93" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt;::deallocate (200 samples, 0.07%)</title><rect x="160.9" y="261" width="0.9" height="15.0" fill="rgb(226,190,13)" rx="2" ry="2" />
<text  x="163.89" y="271.5" ></text>
</g>
<g >
<title>std::atomic&lt;moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducerHash*&gt;::load (47 samples, 0.02%)</title><rect x="1050.3" y="293" width="0.2" height="15.0" fill="rgb(215,6,35)" rx="2" ry="2" />
<text  x="1053.27" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (81 samples, 0.03%)</title><rect x="1136.7" y="357" width="0.4" height="15.0" fill="rgb(222,162,29)" rx="2" ry="2" />
<text  x="1139.75" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (108 samples, 0.04%)</title><rect x="23.6" y="389" width="0.5" height="15.0" fill="rgb(230,4,23)" rx="2" ry="2" />
<text  x="26.60" y="399.5" ></text>
</g>
<g >
<title>futex_wake (5,885 samples, 2.14%)</title><rect x="1095.3" y="245" width="25.2" height="15.0" fill="rgb(224,142,20)" rx="2" ry="2" />
<text  x="1098.27" y="255.5" >f..</text>
</g>
<g >
<title>rdma_client (274,799 samples, 100.00%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(253,39,38)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >rdma_client</text>
</g>
<g >
<title>std::pair&lt;unsigned long const, kv::ListNode*&gt;::pair&lt;unsigned long const&amp;, 0ul&gt; (119 samples, 0.04%)</title><rect x="808.9" y="293" width="0.5" height="15.0" fill="rgb(247,53,46)" rx="2" ry="2" />
<text  x="811.94" y="303.5" ></text>
</g>
<g >
<title>__schedule (198 samples, 0.07%)</title><rect x="385.5" y="197" width="0.8" height="15.0" fill="rgb(230,204,0)" rx="2" ry="2" />
<text  x="388.50" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (49 samples, 0.02%)</title><rect x="158.4" y="277" width="0.3" height="15.0" fill="rgb(250,45,16)" rx="2" ry="2" />
<text  x="161.45" y="287.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (42 samples, 0.02%)</title><rect x="1170.1" y="197" width="0.2" height="15.0" fill="rgb(209,53,2)" rx="2" ry="2" />
<text  x="1173.09" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt;::allocate (25 samples, 0.01%)</title><rect x="1137.2" y="325" width="0.1" height="15.0" fill="rgb(227,73,34)" rx="2" ry="2" />
<text  x="1140.22" y="335.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (62 samples, 0.02%)</title><rect x="150.9" y="357" width="0.3" height="15.0" fill="rgb(227,76,6)" rx="2" ry="2" />
<text  x="153.89" y="367.5" ></text>
</g>
<g >
<title>rmap_walk (49 samples, 0.02%)</title><rect x="1170.1" y="261" width="0.2" height="15.0" fill="rgb(248,44,38)" rx="2" ry="2" />
<text  x="1173.06" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (16,097 samples, 5.86%)</title><rect x="696.0" y="373" width="69.1" height="15.0" fill="rgb(234,15,19)" rx="2" ry="2" />
<text  x="698.99" y="383.5" >std::_H..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (187 samples, 0.07%)</title><rect x="762.9" y="341" width="0.8" height="15.0" fill="rgb(243,200,10)" rx="2" ry="2" />
<text  x="765.87" y="351.5" ></text>
</g>
<g >
<title>change_prot_numa (56 samples, 0.02%)</title><rect x="692.5" y="229" width="0.2" height="15.0" fill="rgb(241,104,45)" rx="2" ry="2" />
<text  x="695.47" y="239.5" ></text>
</g>
<g >
<title>try_to_unmap_one (46 samples, 0.02%)</title><rect x="1170.1" y="229" width="0.2" height="15.0" fill="rgb(224,48,14)" rx="2" ry="2" />
<text  x="1173.07" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (757 samples, 0.28%)</title><rect x="791.2" y="293" width="3.2" height="15.0" fill="rgb(246,132,26)" rx="2" ry="2" />
<text  x="794.16" y="303.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::find (66 samples, 0.02%)</title><rect x="1172.8" y="549" width="0.2" height="15.0" fill="rgb(244,181,4)" rx="2" ry="2" />
<text  x="1175.76" y="559.5" ></text>
</g>
<g >
<title>kv::LRUCache::Insert (25,823 samples, 9.40%)</title><rect x="1026.7" y="405" width="110.9" height="15.0" fill="rgb(235,73,51)" rx="2" ry="2" />
<text  x="1029.72" y="415.5" >kv::LRUCache:..</text>
</g>
<g >
<title>__gthread_mutex_unlock (74 samples, 0.03%)</title><rect x="308.0" y="341" width="0.3" height="15.0" fill="rgb(244,163,47)" rx="2" ry="2" />
<text  x="310.99" y="351.5" ></text>
</g>
<g >
<title>futex_wait_setup (15,218 samples, 5.54%)</title><rect x="386.3" y="229" width="65.4" height="15.0" fill="rgb(213,226,4)" rx="2" ry="2" />
<text  x="389.35" y="239.5" >futex_w..</text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::insert_block_index_entry&lt; (49 samples, 0.02%)</title><rect x="204.9" y="293" width="0.2" height="15.0" fill="rgb(245,38,36)" rx="2" ry="2" />
<text  x="207.92" y="303.5" ></text>
</g>
<g >
<title>rmap_walk_anon (48 samples, 0.02%)</title><rect x="1170.1" y="245" width="0.2" height="15.0" fill="rgb(207,160,32)" rx="2" ry="2" />
<text  x="1173.06" y="255.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; (220 samples, 0.08%)</title><rect x="317.9" y="389" width="0.9" height="15.0" fill="rgb(244,24,33)" rx="2" ry="2" />
<text  x="320.88" y="399.5" ></text>
</g>
<g >
<title>ibv_post_send (240 samples, 0.09%)</title><rect x="1056.3" y="325" width="1.0" height="15.0" fill="rgb(238,171,16)" rx="2" ry="2" />
<text  x="1059.27" y="335.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::next_prod (42 samples, 0.02%)</title><rect x="114.9" y="309" width="0.2" height="15.0" fill="rgb(238,35,48)" rx="2" ry="2" />
<text  x="117.90" y="319.5" ></text>
</g>
<g >
<title>TestKey::to_string[abi:cxx11] (31 samples, 0.01%)</title><rect x="10.0" y="565" width="0.1" height="15.0" fill="rgb(252,87,4)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::enqueue (314 samples, 0.11%)</title><rect x="1049.1" y="341" width="1.4" height="15.0" fill="rgb(214,114,7)" rx="2" ry="2" />
<text  x="1052.12" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt;::construct&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (43 samples, 0.02%)</title><rect x="1137.4" y="325" width="0.1" height="15.0" fill="rgb(232,26,0)" rx="2" ry="2" />
<text  x="1140.35" y="335.5" ></text>
</g>
<g >
<title>[rdma_client] (30 samples, 0.01%)</title><rect x="47.5" y="405" width="0.1" height="15.0" fill="rgb(223,175,15)" rx="2" ry="2" />
<text  x="50.52" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long const, kv::ListNode*&gt; (407 samples, 0.15%)</title><rect x="792.7" y="277" width="1.7" height="15.0" fill="rgb(217,100,45)" rx="2" ry="2" />
<text  x="795.66" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (132 samples, 0.05%)</title><rect x="1181.5" y="565" width="0.6" height="15.0" fill="rgb(217,82,0)" rx="2" ry="2" />
<text  x="1184.52" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_Hash_node_value_base (30 samples, 0.01%)</title><rect x="807.2" y="325" width="0.2" height="15.0" fill="rgb(222,52,47)" rx="2" ry="2" />
<text  x="810.23" y="335.5" ></text>
</g>
<g >
<title>rmap_walk_anon (153 samples, 0.06%)</title><rect x="30.1" y="197" width="0.6" height="15.0" fill="rgb(228,135,36)" rx="2" ry="2" />
<text  x="33.06" y="207.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (54,417 samples, 19.80%)</title><rect x="459.0" y="341" width="233.7" height="15.0" fill="rgb(225,43,18)" rx="2" ry="2" />
<text  x="462.04" y="351.5" >__GI___pthread_mutex_unlock</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (81 samples, 0.03%)</title><rect x="1182.4" y="565" width="0.3" height="15.0" fill="rgb(216,63,26)" rx="2" ry="2" />
<text  x="1185.37" y="575.5" ></text>
</g>
<g >
<title>tcache_get (117 samples, 0.04%)</title><rect x="33.4" y="357" width="0.5" height="15.0" fill="rgb(216,87,44)" rx="2" ry="2" />
<text  x="36.38" y="367.5" ></text>
</g>
<g >
<title>do_page_fault (215 samples, 0.08%)</title><rect x="1169.4" y="405" width="1.0" height="15.0" fill="rgb(252,8,13)" rx="2" ry="2" />
<text  x="1172.44" y="415.5" ></text>
</g>
<g >
<title>operator delete (64 samples, 0.02%)</title><rect x="1169.2" y="421" width="0.2" height="15.0" fill="rgb(239,207,21)" rx="2" ry="2" />
<text  x="1172.17" y="431.5" ></text>
</g>
<g >
<title>kv::RDMAConnection::rdma_remote_read (2,621 samples, 0.95%)</title><rect x="1052.0" y="341" width="11.2" height="15.0" fill="rgb(221,46,53)" rx="2" ry="2" />
<text  x="1054.97" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_ptr (54 samples, 0.02%)</title><rect x="1170.9" y="565" width="0.3" height="15.0" fill="rgb(213,101,30)" rx="2" ry="2" />
<text  x="1173.93" y="575.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::fetch_add (150 samples, 0.05%)</title><rect x="182.7" y="277" width="0.7" height="15.0" fill="rgb(219,162,41)" rx="2" ry="2" />
<text  x="185.75" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (674 samples, 0.25%)</title><rect x="1133.0" y="357" width="2.9" height="15.0" fill="rgb(253,112,15)" rx="2" ry="2" />
<text  x="1135.99" y="367.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::get_block_index_index_for_index (42 samples, 0.02%)</title><rect x="1046.3" y="277" width="0.1" height="15.0" fill="rgb(229,68,27)" rx="2" ry="2" />
<text  x="1049.25" y="287.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (56 samples, 0.02%)</title><rect x="692.5" y="277" width="0.2" height="15.0" fill="rgb(243,89,9)" rx="2" ry="2" />
<text  x="695.47" y="287.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (38 samples, 0.01%)</title><rect x="1170.1" y="181" width="0.2" height="15.0" fill="rgb(226,62,14)" rx="2" ry="2" />
<text  x="1173.11" y="191.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::Block::set_empty&lt; (161 samples, 0.06%)</title><rect x="182.7" y="293" width="0.7" height="15.0" fill="rgb(225,155,5)" rx="2" ry="2" />
<text  x="185.70" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (10,107 samples, 3.68%)</title><rect x="718.4" y="357" width="43.4" height="15.0" fill="rgb(232,195,5)" rx="2" ry="2" />
<text  x="721.38" y="367.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (31 samples, 0.01%)</title><rect x="10.0" y="549" width="0.1" height="15.0" fill="rgb(223,18,29)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (19,368 samples, 7.05%)</title><rect x="373.5" y="309" width="83.2" height="15.0" fill="rgb(214,163,35)" rx="2" ry="2" />
<text  x="376.52" y="319.5" >entry_SYS..</text>
</g>
<g >
<title>do_page_fault (222 samples, 0.08%)</title><rect x="1166.6" y="373" width="1.0" height="15.0" fill="rgb(212,138,54)" rx="2" ry="2" />
<text  x="1169.60" y="383.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (76 samples, 0.03%)</title><rect x="1167.1" y="117" width="0.4" height="15.0" fill="rgb(245,220,30)" rx="2" ry="2" />
<text  x="1170.13" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (116 samples, 0.04%)</title><rect x="807.8" y="293" width="0.5" height="15.0" fill="rgb(213,85,28)" rx="2" ry="2" />
<text  x="810.83" y="303.5" ></text>
</g>
<g >
<title>kv::ConnQue::dequeue (804 samples, 0.29%)</title><rect x="1045.7" y="357" width="3.4" height="15.0" fill="rgb(217,213,8)" rx="2" ry="2" />
<text  x="1048.66" y="367.5" ></text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, std::ratio&lt;1l, 1000l&gt;, long, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1,460 samples, 0.53%)</title><rect x="283.8" y="309" width="6.3" height="15.0" fill="rgb(228,138,53)" rx="2" ry="2" />
<text  x="286.85" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (373 samples, 0.14%)</title><rect x="151.7" y="309" width="1.6" height="15.0" fill="rgb(240,18,29)" rx="2" ry="2" />
<text  x="154.69" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3,116 samples, 1.13%)</title><rect x="21.2" y="405" width="13.3" height="15.0" fill="rgb(254,184,16)" rx="2" ry="2" />
<text  x="24.16" y="415.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (3,881 samples, 1.41%)</title><rect x="264.7" y="309" width="16.7" height="15.0" fill="rgb(206,120,32)" rx="2" ry="2" />
<text  x="267.71" y="319.5" ></text>
</g>
<g >
<title>kv::RDMAConnection::rdma_remote_read (18,323 samples, 6.67%)</title><rect x="225.4" y="341" width="78.6" height="15.0" fill="rgb(242,225,13)" rx="2" ry="2" />
<text  x="228.36" y="351.5" >kv::RDMAC..</text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::get_or_add_implicit_producer (1,050 samples, 0.38%)</title><rect x="208.9" y="309" width="4.5" height="15.0" fill="rgb(246,84,39)" rx="2" ry="2" />
<text  x="211.87" y="319.5" ></text>
</g>
<g >
<title>hash_futex (33 samples, 0.01%)</title><rect x="1084.9" y="229" width="0.1" height="15.0" fill="rgb(234,115,45)" rx="2" ry="2" />
<text  x="1087.87" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long const, kv::ListNode*&gt; (27 samples, 0.01%)</title><rect x="1188.4" y="565" width="0.1" height="15.0" fill="rgb(250,0,18)" rx="2" ry="2" />
<text  x="1191.42" y="575.5" ></text>
</g>
<g >
<title>_raw_spin_lock (257 samples, 0.09%)</title><rect x="1094.2" y="245" width="1.1" height="15.0" fill="rgb(222,161,4)" rx="2" ry="2" />
<text  x="1097.15" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (91 samples, 0.03%)</title><rect x="1123.5" y="325" width="0.4" height="15.0" fill="rgb(239,127,9)" rx="2" ry="2" />
<text  x="1126.55" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6,512 samples, 2.37%)</title><rect x="1092.8" y="309" width="28.0" height="15.0" fill="rgb(213,73,9)" rx="2" ry="2" />
<text  x="1095.80" y="319.5" >e..</text>
</g>
<g >
<title>std::operator&amp; (153 samples, 0.06%)</title><rect x="203.1" y="293" width="0.7" height="15.0" fill="rgb(229,114,3)" rx="2" ry="2" />
<text  x="206.11" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt;::_Hash_node (46 samples, 0.02%)</title><rect x="807.2" y="341" width="0.2" height="15.0" fill="rgb(252,144,27)" rx="2" ry="2" />
<text  x="810.16" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (30 samples, 0.01%)</title><rect x="1064.8" y="309" width="0.1" height="15.0" fill="rgb(223,19,54)" rx="2" ry="2" />
<text  x="1067.78" y="319.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (163 samples, 0.06%)</title><rect x="150.0" y="293" width="0.7" height="15.0" fill="rgb(219,32,35)" rx="2" ry="2" />
<text  x="153.01" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (732 samples, 0.27%)</title><rect x="1022.1" y="389" width="3.1" height="15.0" fill="rgb(231,127,19)" rx="2" ry="2" />
<text  x="1025.06" y="399.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;main::{lambda (270,326 samples, 98.37%)</title><rect x="10.1" y="517" width="1160.8" height="15.0" fill="rgb(227,181,3)" rx="2" ry="2" />
<text  x="13.13" y="527.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;main::{lambda</text>
</g>
<g >
<title>__x64_sys_futex (42,812 samples, 15.58%)</title><rect x="508.5" y="277" width="183.8" height="15.0" fill="rgb(207,31,17)" rx="2" ry="2" />
<text  x="511.51" y="287.5" >__x64_sys_futex</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;kv::ListNode*&gt; &gt;::destroy&lt;kv::ListNode*&gt; (78 samples, 0.03%)</title><rect x="175.9" y="341" width="0.3" height="15.0" fill="rgb(214,72,36)" rx="2" ry="2" />
<text  x="178.86" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (377 samples, 0.14%)</title><rect x="164.6" y="293" width="1.6" height="15.0" fill="rgb(225,74,22)" rx="2" ry="2" />
<text  x="167.62" y="303.5" ></text>
</g>
<g >
<title>std::atomic_thread_fence (103 samples, 0.04%)</title><rect x="187.2" y="293" width="0.5" height="15.0" fill="rgb(229,153,1)" rx="2" ry="2" />
<text  x="190.22" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (41 samples, 0.01%)</title><rect x="1170.4" y="421" width="0.1" height="15.0" fill="rgb(209,224,13)" rx="2" ry="2" />
<text  x="1173.37" y="431.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (467 samples, 0.17%)</title><rect x="1012.3" y="133" width="2.0" height="15.0" fill="rgb(247,100,50)" rx="2" ry="2" />
<text  x="1015.28" y="143.5" ></text>
</g>
<g >
<title>pthread_spin_lock (186 samples, 0.07%)</title><rect x="136.1" y="277" width="0.8" height="15.0" fill="rgb(231,211,47)" rx="2" ry="2" />
<text  x="139.05" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_Tuple_impl (96 samples, 0.03%)</title><rect x="809.5" y="293" width="0.4" height="15.0" fill="rgb(236,134,4)" rx="2" ry="2" />
<text  x="812.52" y="303.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (114 samples, 0.04%)</title><rect x="149.5" y="277" width="0.5" height="15.0" fill="rgb(238,101,33)" rx="2" ry="2" />
<text  x="152.52" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (756 samples, 0.28%)</title><rect x="806.9" y="357" width="3.2" height="15.0" fill="rgb(253,106,48)" rx="2" ry="2" />
<text  x="809.88" y="367.5" ></text>
</g>
<g >
<title>mark_wake_futex (2,547 samples, 0.93%)</title><rect x="570.0" y="229" width="10.9" height="15.0" fill="rgb(253,222,16)" rx="2" ry="2" />
<text  x="572.95" y="239.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (771 samples, 0.28%)</title><rect x="146.7" y="293" width="3.3" height="15.0" fill="rgb(235,25,6)" rx="2" ry="2" />
<text  x="149.70" y="303.5" ></text>
</g>
<g >
<title>rmap_walk (606 samples, 0.22%)</title><rect x="1011.8" y="229" width="2.7" height="15.0" fill="rgb(214,26,40)" rx="2" ry="2" />
<text  x="1014.85" y="239.5" ></text>
</g>
<g >
<title>__do_page_fault (215 samples, 0.08%)</title><rect x="1169.4" y="389" width="1.0" height="15.0" fill="rgb(227,181,8)" rx="2" ry="2" />
<text  x="1172.44" y="399.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::store (132 samples, 0.05%)</title><rect x="119.4" y="277" width="0.6" height="15.0" fill="rgb(233,5,53)" rx="2" ry="2" />
<text  x="122.42" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (83 samples, 0.03%)</title><rect x="1042.4" y="293" width="0.4" height="15.0" fill="rgb(234,79,47)" rx="2" ry="2" />
<text  x="1045.40" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (24 samples, 0.01%)</title><rect x="1131.9" y="325" width="0.1" height="15.0" fill="rgb(249,214,3)" rx="2" ry="2" />
<text  x="1134.94" y="335.5" ></text>
</g>
<g >
<title>kv::RDMAConnection::rdma_remote_read (150 samples, 0.05%)</title><rect x="1174.1" y="565" width="0.7" height="15.0" fill="rgb(232,44,27)" rx="2" ry="2" />
<text  x="1177.12" y="575.5" ></text>
</g>
<g >
<title>rmap_walk (154 samples, 0.06%)</title><rect x="30.1" y="213" width="0.6" height="15.0" fill="rgb(226,29,54)" rx="2" ry="2" />
<text  x="33.06" y="223.5" ></text>
</g>
<g >
<title>smp_call_function_many (58 samples, 0.02%)</title><rect x="1167.2" y="101" width="0.3" height="15.0" fill="rgb(250,187,7)" rx="2" ry="2" />
<text  x="1170.21" y="111.5" ></text>
</g>
<g >
<title>try_to_unmap (154 samples, 0.06%)</title><rect x="30.1" y="229" width="0.6" height="15.0" fill="rgb(244,113,45)" rx="2" ry="2" />
<text  x="33.06" y="239.5" ></text>
</g>
<g >
<title>ibv_post_send (70 samples, 0.03%)</title><rect x="1038.8" y="309" width="0.3" height="15.0" fill="rgb(207,123,6)" rx="2" ry="2" />
<text  x="1041.76" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (183 samples, 0.07%)</title><rect x="153.4" y="341" width="0.8" height="15.0" fill="rgb(217,57,10)" rx="2" ry="2" />
<text  x="156.45" y="351.5" ></text>
</g>
<g >
<title>[[vdso]] (163 samples, 0.06%)</title><rect x="1039.3" y="261" width="0.7" height="15.0" fill="rgb(248,104,53)" rx="2" ry="2" />
<text  x="1042.31" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (107 samples, 0.04%)</title><rect x="1135.9" y="341" width="0.5" height="15.0" fill="rgb(218,208,15)" rx="2" ry="2" />
<text  x="1138.93" y="351.5" ></text>
</g>
<g >
<title>schedule (48 samples, 0.02%)</title><rect x="1075.2" y="213" width="0.2" height="15.0" fill="rgb(230,128,22)" rx="2" ry="2" />
<text  x="1078.22" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (26 samples, 0.01%)</title><rect x="801.0" y="293" width="0.1" height="15.0" fill="rgb(236,132,3)" rx="2" ry="2" />
<text  x="803.96" y="303.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (54 samples, 0.02%)</title><rect x="308.1" y="309" width="0.2" height="15.0" fill="rgb(207,216,29)" rx="2" ry="2" />
<text  x="311.07" y="319.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (1,285 samples, 0.47%)</title><rect x="1077.5" y="197" width="5.5" height="15.0" fill="rgb(229,126,49)" rx="2" ry="2" />
<text  x="1080.53" y="207.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (66 samples, 0.02%)</title><rect x="1174.2" y="533" width="0.2" height="15.0" fill="rgb(215,38,8)" rx="2" ry="2" />
<text  x="1177.15" y="543.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (38 samples, 0.01%)</title><rect x="151.0" y="325" width="0.2" height="15.0" fill="rgb(227,215,45)" rx="2" ry="2" />
<text  x="154.00" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_futex (226 samples, 0.08%)</title><rect x="500.6" y="293" width="1.0" height="15.0" fill="rgb(226,28,17)" rx="2" ry="2" />
<text  x="503.64" y="303.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducerHash*&gt;::load (66 samples, 0.02%)</title><rect x="213.1" y="277" width="0.3" height="15.0" fill="rgb(253,36,18)" rx="2" ry="2" />
<text  x="216.09" y="287.5" ></text>
</g>
<g >
<title>get_futex_key (1,548 samples, 0.56%)</title><rect x="563.2" y="229" width="6.6" height="15.0" fill="rgb(243,215,0)" rx="2" ry="2" />
<text  x="566.16" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::operator[] (146 samples, 0.05%)</title><rect x="1173.0" y="549" width="0.7" height="15.0" fill="rgb(237,30,25)" rx="2" ry="2" />
<text  x="1176.04" y="559.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long const, kv::ListNode*&gt; (192 samples, 0.07%)</title><rect x="747.9" y="261" width="0.8" height="15.0" fill="rgb(219,95,5)" rx="2" ry="2" />
<text  x="750.87" y="271.5" ></text>
</g>
<g >
<title>change_prot_numa (116 samples, 0.04%)</title><rect x="1020.0" y="309" width="0.5" height="15.0" fill="rgb(250,118,41)" rx="2" ry="2" />
<text  x="1023.02" y="319.5" ></text>
</g>
<g >
<title>pthread_spin_lock (552 samples, 0.20%)</title><rect x="132.8" y="277" width="2.4" height="15.0" fill="rgb(233,48,54)" rx="2" ry="2" />
<text  x="135.84" y="287.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (102 samples, 0.04%)</title><rect x="1188.9" y="565" width="0.5" height="15.0" fill="rgb(214,75,29)" rx="2" ry="2" />
<text  x="1191.94" y="575.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::size_approx (3,559 samples, 1.30%)</title><rect x="188.5" y="325" width="15.3" height="15.0" fill="rgb(253,63,2)" rx="2" ry="2" />
<text  x="191.49" y="335.5" ></text>
</g>
<g >
<title>__schedule (40 samples, 0.01%)</title><rect x="1075.3" y="197" width="0.1" height="15.0" fill="rgb(214,54,4)" rx="2" ry="2" />
<text  x="1078.26" y="207.5" ></text>
</g>
<g >
<title>std::mutex::lock (37 samples, 0.01%)</title><rect x="1188.8" y="549" width="0.1" height="15.0" fill="rgb(228,207,12)" rx="2" ry="2" />
<text  x="1191.78" y="559.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::dequeue&lt;kv::RDMAConnection*&gt; (232 samples, 0.08%)</title><rect x="1045.9" y="309" width="1.0" height="15.0" fill="rgb(233,144,5)" rx="2" ry="2" />
<text  x="1048.88" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt;::deallocate (37 samples, 0.01%)</title><rect x="1042.6" y="261" width="0.1" height="15.0" fill="rgb(237,174,19)" rx="2" ry="2" />
<text  x="1045.57" y="271.5" ></text>
</g>
<g >
<title>get_futex_key (138 samples, 0.05%)</title><rect x="1083.0" y="213" width="0.6" height="15.0" fill="rgb(233,227,48)" rx="2" ry="2" />
<text  x="1086.04" y="223.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (79 samples, 0.03%)</title><rect x="1167.1" y="133" width="0.4" height="15.0" fill="rgb(249,189,29)" rx="2" ry="2" />
<text  x="1170.13" y="143.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (422 samples, 0.15%)</title><rect x="302.2" y="309" width="1.8" height="15.0" fill="rgb(228,17,32)" rx="2" ry="2" />
<text  x="305.23" y="319.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (4,767 samples, 1.73%)</title><rect x="1065.2" y="389" width="20.4" height="15.0" fill="rgb(235,166,43)" rx="2" ry="2" />
<text  x="1068.15" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (24 samples, 0.01%)</title><rect x="807.3" y="309" width="0.1" height="15.0" fill="rgb(228,190,25)" rx="2" ry="2" />
<text  x="810.26" y="319.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (1,430 samples, 0.52%)</title><rect x="136.9" y="309" width="6.1" height="15.0" fill="rgb(252,212,7)" rx="2" ry="2" />
<text  x="139.85" y="319.5" ></text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, std::ratio&lt;1l, 1000l&gt;, long, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (110 samples, 0.04%)</title><rect x="1187.2" y="549" width="0.5" height="15.0" fill="rgb(231,37,30)" rx="2" ry="2" />
<text  x="1190.21" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,235 samples, 0.45%)</title><rect x="309.6" y="325" width="5.3" height="15.0" fill="rgb(254,75,22)" rx="2" ry="2" />
<text  x="312.56" y="335.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (177 samples, 0.06%)</title><rect x="1040.4" y="309" width="0.7" height="15.0" fill="rgb(212,81,20)" rx="2" ry="2" />
<text  x="1043.37" y="319.5" ></text>
</g>
<g >
<title>page_fault (1,618 samples, 0.59%)</title><rect x="1008.0" y="389" width="7.0" height="15.0" fill="rgb(239,201,37)" rx="2" ry="2" />
<text  x="1011.01" y="399.5" ></text>
</g>
<g >
<title>kv::LRUCache::Insert (67 samples, 0.02%)</title><rect x="1173.7" y="565" width="0.3" height="15.0" fill="rgb(231,186,12)" rx="2" ry="2" />
<text  x="1176.67" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (113 samples, 0.04%)</title><rect x="156.0" y="309" width="0.5" height="15.0" fill="rgb(219,33,34)" rx="2" ry="2" />
<text  x="158.97" y="319.5" ></text>
</g>
<g >
<title>smp_call_function_many (85 samples, 0.03%)</title><rect x="30.3" y="85" width="0.4" height="15.0" fill="rgb(249,22,49)" rx="2" ry="2" />
<text  x="33.30" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (307 samples, 0.11%)</title><rect x="1131.7" y="357" width="1.3" height="15.0" fill="rgb(234,28,48)" rx="2" ry="2" />
<text  x="1134.67" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::deallocate (42 samples, 0.02%)</title><rect x="1042.5" y="277" width="0.2" height="15.0" fill="rgb(247,81,51)" rx="2" ry="2" />
<text  x="1045.55" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5,485 samples, 2.00%)</title><rect x="82.1" y="389" width="23.6" height="15.0" fill="rgb(226,43,53)" rx="2" ry="2" />
<text  x="85.12" y="399.5" >_..</text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (67 samples, 0.02%)</title><rect x="1135.3" y="293" width="0.3" height="15.0" fill="rgb(206,61,6)" rx="2" ry="2" />
<text  x="1138.31" y="303.5" ></text>
</g>
<g >
<title>kv::ConnectionManager::remote_write (1,402 samples, 0.51%)</title><rect x="1035.1" y="357" width="6.0" height="15.0" fill="rgb(220,31,26)" rx="2" ry="2" />
<text  x="1038.11" y="367.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::try_get_block_from_free_list (49 samples, 0.02%)</title><rect x="205.1" y="277" width="0.2" height="15.0" fill="rgb(248,72,41)" rx="2" ry="2" />
<text  x="208.14" y="287.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::inner_enqueue&lt; (64 samples, 0.02%)</title><rect x="1036.3" y="309" width="0.2" height="15.0" fill="rgb(222,213,39)" rx="2" ry="2" />
<text  x="1039.25" y="319.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (47 samples, 0.02%)</title><rect x="119.2" y="277" width="0.2" height="15.0" fill="rgb(235,179,14)" rx="2" ry="2" />
<text  x="122.21" y="287.5" ></text>
</g>
<g >
<title>kv::RDMAConnection::remote_write (1,073 samples, 0.39%)</title><rect x="1036.5" y="341" width="4.6" height="15.0" fill="rgb(238,118,29)" rx="2" ry="2" />
<text  x="1039.53" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (33 samples, 0.01%)</title><rect x="1019.9" y="373" width="0.1" height="15.0" fill="rgb(244,211,34)" rx="2" ry="2" />
<text  x="1022.88" y="383.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::try_dequeue&lt;kv::RDMAConnection*&gt; (259 samples, 0.09%)</title><rect x="1035.1" y="325" width="1.1" height="15.0" fill="rgb(243,3,25)" rx="2" ry="2" />
<text  x="1038.14" y="335.5" ></text>
</g>
<g >
<title>[[vdso]] (461 samples, 0.17%)</title><rect x="1058.0" y="277" width="2.0" height="15.0" fill="rgb(211,190,16)" rx="2" ry="2" />
<text  x="1060.97" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (98 samples, 0.04%)</title><rect x="1134.9" y="293" width="0.4" height="15.0" fill="rgb(236,205,6)" rx="2" ry="2" />
<text  x="1137.89" y="303.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (184 samples, 0.07%)</title><rect x="1039.2" y="277" width="0.8" height="15.0" fill="rgb(235,217,34)" rx="2" ry="2" />
<text  x="1042.22" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (32 samples, 0.01%)</title><rect x="740.2" y="293" width="0.2" height="15.0" fill="rgb(222,150,16)" rx="2" ry="2" />
<text  x="743.23" y="303.5" ></text>
</g>
<g >
<title>wake_up_q (25,386 samples, 9.24%)</title><rect x="582.1" y="229" width="109.0" height="15.0" fill="rgb(215,17,48)" rx="2" ry="2" />
<text  x="585.07" y="239.5" >wake_up_q</text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false, false&gt;::_Node_iterator (266 samples, 0.10%)</title><rect x="764.0" y="357" width="1.1" height="15.0" fill="rgb(249,169,46)" rx="2" ry="2" />
<text  x="766.97" y="367.5" ></text>
</g>
<g >
<title>ibv_post_send (381 samples, 0.14%)</title><rect x="135.2" y="309" width="1.7" height="15.0" fill="rgb(216,207,44)" rx="2" ry="2" />
<text  x="138.21" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (149 samples, 0.05%)</title><rect x="1042.8" y="325" width="0.6" height="15.0" fill="rgb(206,14,51)" rx="2" ry="2" />
<text  x="1045.78" y="335.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (70 samples, 0.03%)</title><rect x="1186.9" y="549" width="0.3" height="15.0" fill="rgb(247,180,2)" rx="2" ry="2" />
<text  x="1189.90" y="559.5" ></text>
</g>
<g >
<title>[rdma_client] (31 samples, 0.01%)</title><rect x="321.9" y="341" width="0.1" height="15.0" fill="rgb(231,14,30)" rx="2" ry="2" />
<text  x="324.85" y="351.5" ></text>
</g>
<g >
<title>kv::RDMAConnection::remote_read (21,109 samples, 7.68%)</title><rect x="213.4" y="357" width="90.6" height="15.0" fill="rgb(241,121,28)" rx="2" ry="2" />
<text  x="216.40" y="367.5" >kv::RDMACo..</text>
</g>
<g >
<title>std::mutex::lock (4,712 samples, 1.71%)</title><rect x="1065.4" y="373" width="20.2" height="15.0" fill="rgb(243,4,40)" rx="2" ry="2" />
<text  x="1068.39" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (93 samples, 0.03%)</title><rect x="178.2" y="309" width="0.4" height="15.0" fill="rgb(229,155,43)" rx="2" ry="2" />
<text  x="181.18" y="319.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (3,609 samples, 1.31%)</title><rect x="265.9" y="293" width="15.5" height="15.0" fill="rgb(215,85,52)" rx="2" ry="2" />
<text  x="268.87" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (51 samples, 0.02%)</title><rect x="761.8" y="357" width="0.2" height="15.0" fill="rgb(207,78,42)" rx="2" ry="2" />
<text  x="764.78" y="367.5" ></text>
</g>
<g >
<title>numamigrate_isolate_page (34 samples, 0.01%)</title><rect x="1014.5" y="261" width="0.1" height="15.0" fill="rgb(233,192,0)" rx="2" ry="2" />
<text  x="1017.46" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,496 samples, 0.54%)</title><rect x="953.6" y="389" width="6.4" height="15.0" fill="rgb(217,179,24)" rx="2" ry="2" />
<text  x="956.62" y="399.5" ></text>
</g>
<g >
<title>task_work_run (102 samples, 0.04%)</title><rect x="211.6" y="213" width="0.4" height="15.0" fill="rgb(249,122,34)" rx="2" ry="2" />
<text  x="214.59" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt;::construct&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (328 samples, 0.12%)</title><rect x="808.5" y="325" width="1.4" height="15.0" fill="rgb(205,209,34)" rx="2" ry="2" />
<text  x="811.53" y="335.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;&amp;&gt; (240 samples, 0.09%)</title><rect x="791.6" y="277" width="1.1" height="15.0" fill="rgb(249,53,50)" rx="2" ry="2" />
<text  x="794.63" y="287.5" ></text>
</g>
<g >
<title>[rdma_client] (31 samples, 0.01%)</title><rect x="1022.7" y="373" width="0.2" height="15.0" fill="rgb(220,167,30)" rx="2" ry="2" />
<text  x="1025.73" y="383.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::store (28 samples, 0.01%)</title><rect x="1036.3" y="277" width="0.1" height="15.0" fill="rgb(248,109,14)" rx="2" ry="2" />
<text  x="1039.32" y="287.5" ></text>
</g>
<g >
<title>std::atomic&lt;moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducerHash*&gt;::load (43 samples, 0.02%)</title><rect x="120.3" y="277" width="0.1" height="15.0" fill="rgb(234,166,0)" rx="2" ry="2" />
<text  x="123.26" y="287.5" ></text>
</g>
<g >
<title>task_numa_work (116 samples, 0.04%)</title><rect x="1020.0" y="325" width="0.5" height="15.0" fill="rgb(233,29,46)" rx="2" ry="2" />
<text  x="1023.02" y="335.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (3,243 samples, 1.18%)</title><rect x="290.1" y="325" width="13.9" height="15.0" fill="rgb(254,122,40)" rx="2" ry="2" />
<text  x="293.12" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long&gt;::operator (69 samples, 0.03%)</title><rect x="763.7" y="341" width="0.3" height="15.0" fill="rgb(212,32,36)" rx="2" ry="2" />
<text  x="766.67" y="351.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::get_or_add_implicit_producer (164 samples, 0.06%)</title><rect x="1049.8" y="309" width="0.7" height="15.0" fill="rgb(211,134,28)" rx="2" ry="2" />
<text  x="1052.76" y="319.5" ></text>
</g>
<g >
<title>futex_wake (24 samples, 0.01%)</title><rect x="692.2" y="261" width="0.1" height="15.0" fill="rgb(215,72,50)" rx="2" ry="2" />
<text  x="695.25" y="271.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.19.35.0] (1,503 samples, 0.55%)</title><rect x="128.8" y="293" width="6.4" height="15.0" fill="rgb(253,214,7)" rx="2" ry="2" />
<text  x="131.76" y="303.5" ></text>
</g>
<g >
<title>std::operator-&lt;kv::ListNode*, kv::ListNode*&amp;, kv::ListNode**&gt; (490 samples, 0.18%)</title><rect x="176.5" y="341" width="2.1" height="15.0" fill="rgb(232,222,15)" rx="2" ry="2" />
<text  x="179.47" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (103 samples, 0.04%)</title><rect x="785.1" y="309" width="0.4" height="15.0" fill="rgb(246,171,54)" rx="2" ry="2" />
<text  x="788.10" y="319.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::end (89 samples, 0.03%)</title><rect x="1120.8" y="389" width="0.4" height="15.0" fill="rgb(236,43,40)" rx="2" ry="2" />
<text  x="1123.84" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (194 samples, 0.07%)</title><rect x="1182.8" y="565" width="0.9" height="15.0" fill="rgb(213,166,53)" rx="2" ry="2" />
<text  x="1185.83" y="575.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (78 samples, 0.03%)</title><rect x="1187.7" y="565" width="0.3" height="15.0" fill="rgb(235,60,7)" rx="2" ry="2" />
<text  x="1190.68" y="575.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (309 samples, 0.11%)</title><rect x="1061.6" y="309" width="1.3" height="15.0" fill="rgb(223,73,13)" rx="2" ry="2" />
<text  x="1064.60" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::_M_node_allocator (30 samples, 0.01%)</title><rect x="1042.4" y="277" width="0.1" height="15.0" fill="rgb(242,83,41)" rx="2" ry="2" />
<text  x="1045.42" y="287.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::try_dequeue&lt;kv::RDMAConnection*&gt; (1,529 samples, 0.56%)</title><rect x="112.2" y="325" width="6.6" height="15.0" fill="rgb(208,148,48)" rx="2" ry="2" />
<text  x="115.24" y="335.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::dequeue&lt;kv::RDMAConnection*&gt; (1,732 samples, 0.63%)</title><rect x="180.3" y="325" width="7.4" height="15.0" fill="rgb(230,2,31)" rx="2" ry="2" />
<text  x="183.25" y="335.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.19.35.0] (691 samples, 0.25%)</title><rect x="1053.3" y="309" width="3.0" height="15.0" fill="rgb(242,43,19)" rx="2" ry="2" />
<text  x="1056.30" y="319.5" ></text>
</g>
<g >
<title>kv::ListNode::remote_write (1,403 samples, 0.51%)</title><rect x="1035.1" y="373" width="6.0" height="15.0" fill="rgb(247,53,14)" rx="2" ry="2" />
<text  x="1038.11" y="383.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (273 samples, 0.10%)</title><rect x="165.1" y="277" width="1.1" height="15.0" fill="rgb(250,85,52)" rx="2" ry="2" />
<text  x="168.06" y="287.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (8,201 samples, 2.98%)</title><rect x="1085.6" y="389" width="35.2" height="15.0" fill="rgb(239,157,49)" rx="2" ry="2" />
<text  x="1088.62" y="399.5" >st..</text>
</g>
<g >
<title>ptep_clear_flush (541 samples, 0.20%)</title><rect x="1012.1" y="181" width="2.3" height="15.0" fill="rgb(221,183,50)" rx="2" ry="2" />
<text  x="1015.11" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (57 samples, 0.02%)</title><rect x="1020.7" y="405" width="0.2" height="15.0" fill="rgb(234,165,11)" rx="2" ry="2" />
<text  x="1023.67" y="415.5" ></text>
</g>
<g >
<title>std::queue&lt;kv::ListNode*, std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt; &gt;::pop (155 samples, 0.06%)</title><rect x="175.6" y="373" width="0.7" height="15.0" fill="rgb(213,101,10)" rx="2" ry="2" />
<text  x="178.64" y="383.5" ></text>
</g>
<g >
<title>tcache_get (53 samples, 0.02%)</title><rect x="808.1" y="277" width="0.2" height="15.0" fill="rgb(243,108,34)" rx="2" ry="2" />
<text  x="811.10" y="287.5" ></text>
</g>
<g >
<title>kv::ConnQue::enqueue (2,202 samples, 0.80%)</title><rect x="203.9" y="357" width="9.5" height="15.0" fill="rgb(251,141,29)" rx="2" ry="2" />
<text  x="206.94" y="367.5" ></text>
</g>
<g >
<title>plist_add (115 samples, 0.04%)</title><rect x="1085.0" y="229" width="0.5" height="15.0" fill="rgb(247,227,18)" rx="2" ry="2" />
<text  x="1088.01" y="239.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (125 samples, 0.05%)</title><rect x="1167.8" y="373" width="0.5" height="15.0" fill="rgb(222,127,28)" rx="2" ry="2" />
<text  x="1170.77" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (787 samples, 0.29%)</title><rect x="745.3" y="293" width="3.4" height="15.0" fill="rgb(240,196,29)" rx="2" ry="2" />
<text  x="748.31" y="303.5" ></text>
</g>
<g >
<title>kv::LRUCache::PushToFront (1,412 samples, 0.51%)</title><rect x="166.5" y="389" width="6.1" height="15.0" fill="rgb(222,103,28)" rx="2" ry="2" />
<text  x="169.51" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (108 samples, 0.04%)</title><rect x="315.6" y="325" width="0.5" height="15.0" fill="rgb(236,30,24)" rx="2" ry="2" />
<text  x="318.59" y="335.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (123 samples, 0.04%)</title><rect x="1074.9" y="229" width="0.5" height="15.0" fill="rgb(224,113,26)" rx="2" ry="2" />
<text  x="1077.90" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (433 samples, 0.16%)</title><rect x="805.0" y="341" width="1.9" height="15.0" fill="rgb(220,210,0)" rx="2" ry="2" />
<text  x="808.02" y="351.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (477 samples, 0.17%)</title><rect x="1061.2" y="325" width="2.0" height="15.0" fill="rgb(214,86,10)" rx="2" ry="2" />
<text  x="1064.18" y="335.5" ></text>
</g>
<g >
<title>std::atomic_flag::clear (1,575 samples, 0.57%)</title><rect x="1000.0" y="373" width="6.7" height="15.0" fill="rgb(246,2,24)" rx="2" ry="2" />
<text  x="1002.98" y="383.5" ></text>
</g>
<g >
<title>mlx5dv_open_device (66 samples, 0.02%)</title><rect x="1038.8" y="293" width="0.3" height="15.0" fill="rgb(215,142,43)" rx="2" ry="2" />
<text  x="1041.78" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (381 samples, 0.14%)</title><rect x="151.7" y="325" width="1.6" height="15.0" fill="rgb(227,60,16)" rx="2" ry="2" />
<text  x="154.66" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (78 samples, 0.03%)</title><rect x="1177.7" y="565" width="0.3" height="15.0" fill="rgb(227,72,7)" rx="2" ry="2" />
<text  x="1180.69" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;::_M_v (42 samples, 0.02%)</title><rect x="316.5" y="277" width="0.2" height="15.0" fill="rgb(227,31,22)" rx="2" ry="2" />
<text  x="319.54" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt;::_Node_iterator_base (25 samples, 0.01%)</title><rect x="1121.1" y="341" width="0.1" height="15.0" fill="rgb(227,205,15)" rx="2" ry="2" />
<text  x="1124.11" y="351.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::next_prod (186 samples, 0.07%)</title><rect x="187.7" y="325" width="0.8" height="15.0" fill="rgb(216,128,3)" rx="2" ry="2" />
<text  x="190.69" y="335.5" ></text>
</g>
<g >
<title>get_futex_key (988 samples, 0.36%)</title><rect x="439.0" y="213" width="4.2" height="15.0" fill="rgb(226,54,2)" rx="2" ry="2" />
<text  x="441.97" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (242 samples, 0.09%)</title><rect x="803.0" y="341" width="1.0" height="15.0" fill="rgb(249,44,11)" rx="2" ry="2" />
<text  x="805.96" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;kv::ListNode*&gt;::construct&lt;kv::ListNode*, kv::ListNode* const&amp;&gt; (39 samples, 0.01%)</title><rect x="155.2" y="325" width="0.2" height="15.0" fill="rgb(251,52,29)" rx="2" ry="2" />
<text  x="158.23" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;kv::ListNode*&gt; &gt;::construct&lt;kv::ListNode*, kv::ListNode* const&amp;&gt; (67 samples, 0.02%)</title><rect x="155.1" y="341" width="0.3" height="15.0" fill="rgb(206,24,48)" rx="2" ry="2" />
<text  x="158.14" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_ptr (42 samples, 0.02%)</title><rect x="1134.7" y="261" width="0.2" height="15.0" fill="rgb(251,183,24)" rx="2" ry="2" />
<text  x="1137.71" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false, false&gt;::_Node_iterator (29 samples, 0.01%)</title><rect x="761.9" y="341" width="0.1" height="15.0" fill="rgb(229,138,30)" rx="2" ry="2" />
<text  x="764.88" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt;::front (75 samples, 0.03%)</title><rect x="175.3" y="357" width="0.3" height="15.0" fill="rgb(240,3,28)" rx="2" ry="2" />
<text  x="178.32" y="367.5" ></text>
</g>
<g >
<title>do_page_fault (34 samples, 0.01%)</title><rect x="110.1" y="357" width="0.1" height="15.0" fill="rgb(235,211,4)" rx="2" ry="2" />
<text  x="113.09" y="367.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (4,614 samples, 1.68%)</title><rect x="1065.7" y="341" width="19.9" height="15.0" fill="rgb(249,72,24)" rx="2" ry="2" />
<text  x="1068.74" y="351.5" ></text>
</g>
<g >
<title>__lll_lock_wait (3,081 samples, 1.12%)</title><rect x="1072.3" y="325" width="13.3" height="15.0" fill="rgb(208,123,35)" rx="2" ry="2" />
<text  x="1075.33" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (81 samples, 0.03%)</title><rect x="1184.8" y="549" width="0.4" height="15.0" fill="rgb(254,222,11)" rx="2" ry="2" />
<text  x="1187.81" y="559.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (85 samples, 0.03%)</title><rect x="1188.0" y="565" width="0.4" height="15.0" fill="rgb(239,211,5)" rx="2" ry="2" />
<text  x="1191.02" y="575.5" ></text>
</g>
<g >
<title>pthread_spin_lock (913 samples, 0.33%)</title><rect x="259.2" y="293" width="3.9" height="15.0" fill="rgb(213,82,28)" rx="2" ry="2" />
<text  x="262.22" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (313 samples, 0.11%)</title><rect x="1134.3" y="309" width="1.3" height="15.0" fill="rgb(235,223,49)" rx="2" ry="2" />
<text  x="1137.25" y="319.5" ></text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (524 samples, 0.19%)</title><rect x="143.5" y="309" width="2.2" height="15.0" fill="rgb(213,22,24)" rx="2" ry="2" />
<text  x="146.47" y="319.5" ></text>
</g>
<g >
<title>_int_free (481 samples, 0.18%)</title><rect x="39.3" y="421" width="2.1" height="15.0" fill="rgb(208,164,3)" rx="2" ry="2" />
<text  x="42.29" y="431.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (4,245 samples, 1.54%)</title><rect x="263.1" y="325" width="18.3" height="15.0" fill="rgb(217,102,34)" rx="2" ry="2" />
<text  x="266.14" y="335.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (59 samples, 0.02%)</title><rect x="1010.8" y="229" width="0.2" height="15.0" fill="rgb(240,95,22)" rx="2" ry="2" />
<text  x="1013.78" y="239.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (7,306 samples, 2.66%)</title><rect x="531.8" y="213" width="31.4" height="15.0" fill="rgb(251,189,30)" rx="2" ry="2" />
<text  x="534.78" y="223.5" >na..</text>
</g>
<g >
<title>finish_task_switch (46 samples, 0.02%)</title><rect x="386.1" y="181" width="0.2" height="15.0" fill="rgb(241,52,23)" rx="2" ry="2" />
<text  x="389.15" y="191.5" ></text>
</g>
<g >
<title>std::queue&lt;kv::ListNode*, std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt; &gt;::push (42 samples, 0.02%)</title><rect x="1041.6" y="373" width="0.2" height="15.0" fill="rgb(245,2,12)" rx="2" ry="2" />
<text  x="1044.62" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned int, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt; &gt;::find (1,567 samples, 0.57%)</title><rect x="308.5" y="373" width="6.7" height="15.0" fill="rgb(237,179,6)" rx="2" ry="2" />
<text  x="311.45" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (27 samples, 0.01%)</title><rect x="740.3" y="277" width="0.1" height="15.0" fill="rgb(246,102,49)" rx="2" ry="2" />
<text  x="743.25" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (78 samples, 0.03%)</title><rect x="1042.0" y="309" width="0.3" height="15.0" fill="rgb(216,194,53)" rx="2" ry="2" />
<text  x="1044.96" y="319.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (324 samples, 0.12%)</title><rect x="287.8" y="293" width="1.4" height="15.0" fill="rgb(220,54,28)" rx="2" ry="2" />
<text  x="290.79" y="303.5" ></text>
</g>
<g >
<title>[rdma_client] (65 samples, 0.02%)</title><rect x="20.9" y="405" width="0.3" height="15.0" fill="rgb(233,102,26)" rx="2" ry="2" />
<text  x="23.89" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::erase (2,549 samples, 0.93%)</title><rect x="155.6" y="373" width="10.9" height="15.0" fill="rgb(205,61,45)" rx="2" ry="2" />
<text  x="158.56" y="383.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (102 samples, 0.04%)</title><rect x="211.6" y="229" width="0.4" height="15.0" fill="rgb(246,178,26)" rx="2" ry="2" />
<text  x="214.59" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::find (2,284 samples, 0.83%)</title><rect x="1121.2" y="389" width="9.8" height="15.0" fill="rgb(205,79,27)" rx="2" ry="2" />
<text  x="1124.22" y="399.5" ></text>
</g>
<g >
<title>do_numa_page (341 samples, 0.12%)</title><rect x="29.4" y="277" width="1.4" height="15.0" fill="rgb(210,31,22)" rx="2" ry="2" />
<text  x="32.38" y="287.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::inner_enqueue&lt; (370 samples, 0.13%)</title><rect x="118.9" y="309" width="1.6" height="15.0" fill="rgb(238,147,7)" rx="2" ry="2" />
<text  x="121.87" y="319.5" ></text>
</g>
<g >
<title>pthread_spin_lock (107 samples, 0.04%)</title><rect x="1056.8" y="293" width="0.5" height="15.0" fill="rgb(211,36,36)" rx="2" ry="2" />
<text  x="1059.84" y="303.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_M_head (27 samples, 0.01%)</title><rect x="809.3" y="245" width="0.1" height="15.0" fill="rgb(240,59,31)" rx="2" ry="2" />
<text  x="812.33" y="255.5" ></text>
</g>
<g >
<title>native_send_call_func_ipi (78 samples, 0.03%)</title><rect x="1013.9" y="85" width="0.4" height="15.0" fill="rgb(205,197,36)" rx="2" ry="2" />
<text  x="1016.93" y="95.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (701 samples, 0.26%)</title><rect x="1016.7" y="373" width="3.1" height="15.0" fill="rgb(234,104,38)" rx="2" ry="2" />
<text  x="1019.75" y="383.5" ></text>
</g>
<g >
<title>[rdma_client] (123 samples, 0.04%)</title><rect x="953.1" y="389" width="0.5" height="15.0" fill="rgb(244,28,40)" rx="2" ry="2" />
<text  x="956.09" y="399.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (56 samples, 0.02%)</title><rect x="34.9" y="405" width="0.3" height="15.0" fill="rgb(249,61,19)" rx="2" ry="2" />
<text  x="37.94" y="415.5" ></text>
</g>
<g >
<title>kv::Spinlock::lock (1,344 samples, 0.49%)</title><rect x="1159.5" y="389" width="5.8" height="15.0" fill="rgb(233,77,8)" rx="2" ry="2" />
<text  x="1162.52" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (67 samples, 0.02%)</title><rect x="1136.5" y="357" width="0.2" height="15.0" fill="rgb(208,209,3)" rx="2" ry="2" />
<text  x="1139.46" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false, false&gt;::_Node_iterator (42 samples, 0.02%)</title><rect x="1121.0" y="357" width="0.2" height="15.0" fill="rgb(206,173,3)" rx="2" ry="2" />
<text  x="1124.04" y="367.5" ></text>
</g>
<g >
<title>kv::ListNode::remote_read (4,103 samples, 1.49%)</title><rect x="1045.6" y="389" width="17.6" height="15.0" fill="rgb(220,116,53)" rx="2" ry="2" />
<text  x="1048.61" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (27 samples, 0.01%)</title><rect x="153.6" y="293" width="0.1" height="15.0" fill="rgb(221,121,22)" rx="2" ry="2" />
<text  x="156.63" y="303.5" ></text>
</g>
<g >
<title>do_futex (18,241 samples, 6.64%)</title><rect x="378.2" y="261" width="78.3" height="15.0" fill="rgb(239,179,6)" rx="2" ry="2" />
<text  x="381.18" y="271.5" >do_futex</text>
</g>
<g >
<title>futex_wait (2,632 samples, 0.96%)</title><rect x="1074.2" y="245" width="11.3" height="15.0" fill="rgb(225,204,36)" rx="2" ry="2" />
<text  x="1077.21" y="255.5" ></text>
</g>
<g >
<title>kv::RDMAMemPool::get_rkey (113 samples, 0.04%)</title><rect x="1041.1" y="373" width="0.5" height="15.0" fill="rgb(242,47,9)" rx="2" ry="2" />
<text  x="1044.13" y="383.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (54,363 samples, 19.78%)</title><rect x="459.3" y="325" width="233.4" height="15.0" fill="rgb(213,62,9)" rx="2" ry="2" />
<text  x="462.27" y="335.5" >__pthread_mutex_unlock_usercnt</text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (8,088 samples, 2.94%)</title><rect x="1086.0" y="325" width="34.8" height="15.0" fill="rgb(213,164,40)" rx="2" ry="2" />
<text  x="1089.04" y="335.5" >__..</text>
</g>
<g >
<title>__lock_text_start (3,635 samples, 1.32%)</title><rect x="1104.9" y="197" width="15.6" height="15.0" fill="rgb(241,110,47)" rx="2" ry="2" />
<text  x="1107.92" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (2,532 samples, 0.92%)</title><rect x="155.6" y="357" width="10.9" height="15.0" fill="rgb(230,42,47)" rx="2" ry="2" />
<text  x="158.63" y="367.5" ></text>
</g>
<g >
<title>kv::LocalEngine::read (229,225 samples, 83.42%)</title><rect x="41.4" y="421" width="984.3" height="15.0" fill="rgb(253,6,36)" rx="2" ry="2" />
<text  x="44.36" y="431.5" >kv::LocalEngine::read</text>
</g>
<g >
<title>main::{lambda (78 samples, 0.03%)</title><rect x="1176.8" y="565" width="0.4" height="15.0" fill="rgb(217,192,35)" rx="2" ry="2" />
<text  x="1179.82" y="575.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;main::{lambda (270,326 samples, 98.37%)</title><rect x="10.1" y="501" width="1160.8" height="15.0" fill="rgb(210,25,14)" rx="2" ry="2" />
<text  x="13.13" y="511.5" >std::thread::_Invoker&lt;std::tuple&lt;main::{lambda</text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::add_block_to_free_list (31 samples, 0.01%)</title><rect x="184.7" y="293" width="0.1" height="15.0" fill="rgb(245,160,1)" rx="2" ry="2" />
<text  x="187.70" y="303.5" ></text>
</g>
<g >
<title>kv::LRUCache::Evict (1,995 samples, 0.73%)</title><rect x="1034.9" y="389" width="8.6" height="15.0" fill="rgb(236,67,14)" rx="2" ry="2" />
<text  x="1037.90" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt;::_M_push_back_aux&lt;kv::ListNode* const&amp;&gt; (30 samples, 0.01%)</title><rect x="155.4" y="341" width="0.2" height="15.0" fill="rgb(244,153,7)" rx="2" ry="2" />
<text  x="158.43" y="351.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;::count (363 samples, 0.13%)</title><rect x="281.4" y="325" width="1.5" height="15.0" fill="rgb(241,52,22)" rx="2" ry="2" />
<text  x="284.37" y="335.5" ></text>
</g>
<g >
<title>do_user_addr_fault (114 samples, 0.04%)</title><rect x="317.4" y="341" width="0.5" height="15.0" fill="rgb(210,81,19)" rx="2" ry="2" />
<text  x="320.38" y="351.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::get_block_index_entry_for_index (44 samples, 0.02%)</title><rect x="1046.2" y="293" width="0.2" height="15.0" fill="rgb(224,183,23)" rx="2" ry="2" />
<text  x="1049.24" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (30 samples, 0.01%)</title><rect x="308.3" y="357" width="0.2" height="15.0" fill="rgb(214,193,40)" rx="2" ry="2" />
<text  x="311.32" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (42 samples, 0.02%)</title><rect x="1127.5" y="325" width="0.1" height="15.0" fill="rgb(239,124,15)" rx="2" ry="2" />
<text  x="1130.46" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned long&gt;, true&gt;::_S_cget (101 samples, 0.04%)</title><rect x="797.7" y="293" width="0.5" height="15.0" fill="rgb(237,120,8)" rx="2" ry="2" />
<text  x="800.72" y="303.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::end (50 samples, 0.02%)</title><rect x="1172.5" y="549" width="0.3" height="15.0" fill="rgb(209,12,24)" rx="2" ry="2" />
<text  x="1175.54" y="559.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;&amp;&gt; (195 samples, 0.07%)</title><rect x="746.1" y="277" width="0.9" height="15.0" fill="rgb(230,10,40)" rx="2" ry="2" />
<text  x="749.13" y="287.5" ></text>
</g>
<g >
<title>kv::LocalEngine::write (33,420 samples, 12.16%)</title><rect x="1025.7" y="421" width="143.5" height="15.0" fill="rgb(223,122,49)" rx="2" ry="2" />
<text  x="1028.66" y="431.5" >kv::LocalEngine::w..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (558 samples, 0.20%)</title><rect x="804.5" y="357" width="2.4" height="15.0" fill="rgb(218,90,52)" rx="2" ry="2" />
<text  x="807.48" y="367.5" ></text>
</g>
<g >
<title>do_page_fault (1,618 samples, 0.59%)</title><rect x="1008.0" y="373" width="7.0" height="15.0" fill="rgb(242,13,35)" rx="2" ry="2" />
<text  x="1011.01" y="383.5" ></text>
</g>
<g >
<title>try_to_unmap (49 samples, 0.02%)</title><rect x="1170.1" y="277" width="0.2" height="15.0" fill="rgb(219,133,52)" rx="2" ry="2" />
<text  x="1173.06" y="287.5" ></text>
</g>
<g >
<title>do_numa_page (117 samples, 0.04%)</title><rect x="1169.8" y="325" width="0.6" height="15.0" fill="rgb(245,206,17)" rx="2" ry="2" />
<text  x="1172.85" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (995 samples, 0.36%)</title><rect x="1015.7" y="389" width="4.3" height="15.0" fill="rgb(220,96,24)" rx="2" ry="2" />
<text  x="1018.75" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_free (415 samples, 0.15%)</title><rect x="36.1" y="421" width="1.8" height="15.0" fill="rgb(250,68,38)" rx="2" ry="2" />
<text  x="39.07" y="431.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::insert_block_index_entry&lt; (25 samples, 0.01%)</title><rect x="119.0" y="277" width="0.2" height="15.0" fill="rgb(222,60,30)" rx="2" ry="2" />
<text  x="122.05" y="287.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (80 samples, 0.03%)</title><rect x="1063.3" y="373" width="0.3" height="15.0" fill="rgb(223,178,32)" rx="2" ry="2" />
<text  x="1066.30" y="383.5" ></text>
</g>
<g >
<title>get_futex_value_locked (1,925 samples, 0.70%)</title><rect x="443.3" y="213" width="8.2" height="15.0" fill="rgb(216,133,38)" rx="2" ry="2" />
<text  x="446.27" y="223.5" ></text>
</g>
<g >
<title>ibv_poll_cq (5,842 samples, 2.13%)</title><rect x="230.6" y="325" width="25.0" height="15.0" fill="rgb(222,115,37)" rx="2" ry="2" />
<text  x="233.56" y="335.5" >i..</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt;::_M_next (34 samples, 0.01%)</title><rect x="740.7" y="325" width="0.1" height="15.0" fill="rgb(230,20,29)" rx="2" ry="2" />
<text  x="743.69" y="335.5" ></text>
</g>
<g >
<title>[rdma_client] (72 samples, 0.03%)</title><rect x="230.3" y="325" width="0.3" height="15.0" fill="rgb(225,85,29)" rx="2" ry="2" />
<text  x="233.25" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (25 samples, 0.01%)</title><rect x="1041.4" y="293" width="0.1" height="15.0" fill="rgb(231,58,31)" rx="2" ry="2" />
<text  x="1044.36" y="303.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.0 (1,310 samples, 0.48%)</title><rect x="564.2" y="213" width="5.6" height="15.0" fill="rgb(239,204,10)" rx="2" ry="2" />
<text  x="567.18" y="223.5" ></text>
</g>
<g >
<title>change_protection_range (56 samples, 0.02%)</title><rect x="692.5" y="197" width="0.2" height="15.0" fill="rgb(247,34,49)" rx="2" ry="2" />
<text  x="695.47" y="207.5" ></text>
</g>
<g >
<title>main::{lambda (270,326 samples, 98.37%)</title><rect x="10.1" y="437" width="1160.8" height="15.0" fill="rgb(216,51,20)" rx="2" ry="2" />
<text  x="13.13" y="447.5" >main::{lambda</text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long const, kv::ListNode*&gt; (25 samples, 0.01%)</title><rect x="1135.2" y="261" width="0.1" height="15.0" fill="rgb(228,20,23)" rx="2" ry="2" />
<text  x="1138.20" y="271.5" ></text>
</g>
<g >
<title>move_to_new_page (27 samples, 0.01%)</title><rect x="29.8" y="229" width="0.2" height="15.0" fill="rgb(243,119,5)" rx="2" ry="2" />
<text  x="32.83" y="239.5" ></text>
</g>
<g >
<title>change_protection (102 samples, 0.04%)</title><rect x="211.6" y="165" width="0.4" height="15.0" fill="rgb(236,110,34)" rx="2" ry="2" />
<text  x="214.59" y="175.5" ></text>
</g>
<g >
<title>plist_add (802 samples, 0.29%)</title><rect x="452.9" y="229" width="3.5" height="15.0" fill="rgb(234,178,8)" rx="2" ry="2" />
<text  x="455.93" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (51 samples, 0.02%)</title><rect x="1043.2" y="293" width="0.2" height="15.0" fill="rgb(231,51,2)" rx="2" ry="2" />
<text  x="1046.17" y="303.5" ></text>
</g>
<g >
<title>std::operator&amp; (44 samples, 0.02%)</title><rect x="213.2" y="261" width="0.2" height="15.0" fill="rgb(226,60,29)" rx="2" ry="2" />
<text  x="216.19" y="271.5" ></text>
</g>
<g >
<title>kv::Spinlock::unlock (259 samples, 0.09%)</title><rect x="1165.3" y="389" width="1.1" height="15.0" fill="rgb(248,8,11)" rx="2" ry="2" />
<text  x="1168.29" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long const, kv::ListNode*&gt; (34 samples, 0.01%)</title><rect x="164.9" y="261" width="0.2" height="15.0" fill="rgb(216,180,12)" rx="2" ry="2" />
<text  x="167.92" y="271.5" ></text>
</g>
<g >
<title>ibv_poll_cq (92 samples, 0.03%)</title><rect x="1171.3" y="565" width="0.4" height="15.0" fill="rgb(228,178,24)" rx="2" ry="2" />
<text  x="1174.31" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (184 samples, 0.07%)</title><rect x="1015.0" y="389" width="0.7" height="15.0" fill="rgb(231,144,13)" rx="2" ry="2" />
<text  x="1017.96" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (48 samples, 0.02%)</title><rect x="153.9" y="277" width="0.2" height="15.0" fill="rgb(216,160,34)" rx="2" ry="2" />
<text  x="156.88" y="287.5" ></text>
</g>
<g >
<title>std::mutex::unlock (54,871 samples, 19.97%)</title><rect x="457.6" y="373" width="235.6" height="15.0" fill="rgb(241,227,39)" rx="2" ry="2" />
<text  x="460.62" y="383.5" >std::mutex::unlock</text>
</g>
<g >
<title>__unqueue_futex (185 samples, 0.07%)</title><rect x="1103.4" y="213" width="0.8" height="15.0" fill="rgb(213,30,52)" rx="2" ry="2" />
<text  x="1106.36" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_addr (121 samples, 0.04%)</title><rect x="806.3" y="309" width="0.5" height="15.0" fill="rgb(224,58,15)" rx="2" ry="2" />
<text  x="809.31" y="319.5" ></text>
</g>
<g >
<title>__do_page_fault (507 samples, 0.18%)</title><rect x="28.7" y="341" width="2.2" height="15.0" fill="rgb(206,103,30)" rx="2" ry="2" />
<text  x="31.72" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (413 samples, 0.15%)</title><rect x="743.5" y="293" width="1.8" height="15.0" fill="rgb(247,60,11)" rx="2" ry="2" />
<text  x="746.54" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (164 samples, 0.06%)</title><rect x="1123.9" y="325" width="0.7" height="15.0" fill="rgb(226,183,18)" rx="2" ry="2" />
<text  x="1126.94" y="335.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1,225 samples, 0.45%)</title><rect x="137.7" y="277" width="5.3" height="15.0" fill="rgb(220,21,29)" rx="2" ry="2" />
<text  x="140.73" y="287.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (31,699 samples, 11.54%)</title><rect x="320.9" y="357" width="136.1" height="15.0" fill="rgb(221,78,52)" rx="2" ry="2" />
<text  x="323.90" y="367.5" >__gthread_mutex_l..</text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::operator[] (10,537 samples, 3.83%)</title><rect x="765.1" y="389" width="45.3" height="15.0" fill="rgb(214,83,38)" rx="2" ry="2" />
<text  x="768.11" y="399.5" >std:..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (171 samples, 0.06%)</title><rect x="1167.6" y="389" width="0.8" height="15.0" fill="rgb(249,14,49)" rx="2" ry="2" />
<text  x="1170.64" y="399.5" ></text>
</g>
<g >
<title>do_user_addr_fault (34 samples, 0.01%)</title><rect x="110.1" y="325" width="0.1" height="15.0" fill="rgb(226,98,47)" rx="2" ry="2" />
<text  x="113.09" y="335.5" ></text>
</g>
<g >
<title>moodycamel::details::_hash_32_or_64&lt;true&gt;::hash (137 samples, 0.05%)</title><rect x="210.0" y="277" width="0.6" height="15.0" fill="rgb(215,111,48)" rx="2" ry="2" />
<text  x="212.97" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_futex (129 samples, 0.05%)</title><rect x="373.5" y="293" width="0.6" height="15.0" fill="rgb(253,130,23)" rx="2" ry="2" />
<text  x="376.52" y="303.5" ></text>
</g>
<g >
<title>migrate_misplaced_page (83 samples, 0.03%)</title><rect x="1169.9" y="309" width="0.4" height="15.0" fill="rgb(240,198,40)" rx="2" ry="2" />
<text  x="1172.93" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (77 samples, 0.03%)</title><rect x="1123.6" y="309" width="0.3" height="15.0" fill="rgb(218,186,29)" rx="2" ry="2" />
<text  x="1126.61" y="319.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned int, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt; &gt;::operator[] (72 samples, 0.03%)</title><rect x="1064.6" y="373" width="0.3" height="15.0" fill="rgb(209,59,26)" rx="2" ry="2" />
<text  x="1067.63" y="383.5" ></text>
</g>
<g >
<title>kv::ListNode::remote_write (9,001 samples, 3.28%)</title><rect x="112.1" y="373" width="38.6" height="15.0" fill="rgb(239,218,41)" rx="2" ry="2" />
<text  x="115.06" y="383.5" >kv:..</text>
</g>
<g >
<title>std::hash&lt;unsigned long&gt;::operator (113 samples, 0.04%)</title><rect x="804.0" y="341" width="0.5" height="15.0" fill="rgb(219,30,45)" rx="2" ry="2" />
<text  x="807.00" y="351.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (781 samples, 0.28%)</title><rect x="304.6" y="373" width="3.3" height="15.0" fill="rgb(205,127,47)" rx="2" ry="2" />
<text  x="307.58" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,346 samples, 0.49%)</title><rect x="1124.8" y="341" width="5.8" height="15.0" fill="rgb(207,204,41)" rx="2" ry="2" />
<text  x="1127.78" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (60 samples, 0.02%)</title><rect x="1136.1" y="309" width="0.3" height="15.0" fill="rgb(229,223,5)" rx="2" ry="2" />
<text  x="1139.13" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (24 samples, 0.01%)</title><rect x="1130.4" y="309" width="0.1" height="15.0" fill="rgb(228,83,40)" rx="2" ry="2" />
<text  x="1133.36" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (458 samples, 0.17%)</title><rect x="762.0" y="357" width="2.0" height="15.0" fill="rgb(209,116,46)" rx="2" ry="2" />
<text  x="765.00" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (71 samples, 0.03%)</title><rect x="35.3" y="421" width="0.3" height="15.0" fill="rgb(250,35,12)" rx="2" ry="2" />
<text  x="38.31" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (210 samples, 0.08%)</title><rect x="316.2" y="325" width="0.9" height="15.0" fill="rgb(236,86,4)" rx="2" ry="2" />
<text  x="319.22" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (109 samples, 0.04%)</title><rect x="1137.1" y="357" width="0.5" height="15.0" fill="rgb(250,186,37)" rx="2" ry="2" />
<text  x="1140.09" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (75 samples, 0.03%)</title><rect x="156.1" y="293" width="0.4" height="15.0" fill="rgb(241,39,5)" rx="2" ry="2" />
<text  x="159.14" y="303.5" ></text>
</g>
<g >
<title>__lock_text_start (29 samples, 0.01%)</title><rect x="585.2" y="213" width="0.1" height="15.0" fill="rgb(211,97,18)" rx="2" ry="2" />
<text  x="588.20" y="223.5" ></text>
</g>
<g >
<title>task_work_run (116 samples, 0.04%)</title><rect x="1020.0" y="341" width="0.5" height="15.0" fill="rgb(210,80,35)" rx="2" ry="2" />
<text  x="1023.02" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (71 samples, 0.03%)</title><rect x="1064.6" y="357" width="0.3" height="15.0" fill="rgb(248,202,32)" rx="2" ry="2" />
<text  x="1067.63" y="367.5" ></text>
</g>
<g >
<title>std::atomic&lt;moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducerHash*&gt;::load (314 samples, 0.11%)</title><rect x="212.0" y="293" width="1.4" height="15.0" fill="rgb(211,168,10)" rx="2" ry="2" />
<text  x="215.03" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,592 samples, 0.58%)</title><rect x="24.1" y="389" width="6.8" height="15.0" fill="rgb(206,55,51)" rx="2" ry="2" />
<text  x="27.06" y="399.5" ></text>
</g>
<g >
<title>migrate_misplaced_page (139 samples, 0.05%)</title><rect x="1166.9" y="277" width="0.6" height="15.0" fill="rgb(237,68,18)" rx="2" ry="2" />
<text  x="1169.90" y="287.5" ></text>
</g>
<g >
<title>down_read_trylock (47 samples, 0.02%)</title><rect x="1009.0" y="325" width="0.2" height="15.0" fill="rgb(216,101,11)" rx="2" ry="2" />
<text  x="1012.02" y="335.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::enqueue (65 samples, 0.02%)</title><rect x="1036.2" y="325" width="0.3" height="15.0" fill="rgb(219,69,20)" rx="2" ry="2" />
<text  x="1039.25" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt;::_M_pop_front_aux (26 samples, 0.01%)</title><rect x="176.2" y="341" width="0.1" height="15.0" fill="rgb(236,32,12)" rx="2" ry="2" />
<text  x="179.20" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long const, kv::ListNode*&gt; (54 samples, 0.02%)</title><rect x="1128.5" y="277" width="0.2" height="15.0" fill="rgb(209,166,1)" rx="2" ry="2" />
<text  x="1131.52" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,146 samples, 0.42%)</title><rect x="713.5" y="325" width="4.9" height="15.0" fill="rgb(243,203,9)" rx="2" ry="2" />
<text  x="716.46" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (205 samples, 0.07%)</title><rect x="1041.9" y="325" width="0.9" height="15.0" fill="rgb(209,116,15)" rx="2" ry="2" />
<text  x="1044.90" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt;::size (509 samples, 0.19%)</title><rect x="176.4" y="357" width="2.2" height="15.0" fill="rgb(224,145,4)" rx="2" ry="2" />
<text  x="179.39" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long const&amp;&gt;::tuple&lt;void, true&gt; (33 samples, 0.01%)</title><rect x="810.2" y="357" width="0.2" height="15.0" fill="rgb(221,63,52)" rx="2" ry="2" />
<text  x="813.22" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3,840 samples, 1.40%)</title><rect x="781.7" y="341" width="16.5" height="15.0" fill="rgb(214,224,2)" rx="2" ry="2" />
<text  x="784.66" y="351.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::try_dequeue&lt;kv::RDMAConnection*&gt; (5,796 samples, 2.11%)</title><rect x="179.1" y="341" width="24.8" height="15.0" fill="rgb(207,28,46)" rx="2" ry="2" />
<text  x="182.06" y="351.5" >m..</text>
</g>
<g >
<title>std::mutex::lock (752 samples, 0.27%)</title><rect x="304.7" y="357" width="3.2" height="15.0" fill="rgb(241,1,31)" rx="2" ry="2" />
<text  x="307.71" y="367.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (116 samples, 0.04%)</title><rect x="1020.0" y="357" width="0.5" height="15.0" fill="rgb(237,73,36)" rx="2" ry="2" />
<text  x="1023.02" y="367.5" ></text>
</g>
<g >
<title>[rdma_client] (26 samples, 0.01%)</title><rect x="127.3" y="309" width="0.1" height="15.0" fill="rgb(226,79,11)" rx="2" ry="2" />
<text  x="130.26" y="319.5" ></text>
</g>
<g >
<title>std::operator-&lt;kv::ListNode*, kv::ListNode*&amp;, kv::ListNode**&gt; (73 samples, 0.03%)</title><rect x="1045.3" y="341" width="0.3" height="15.0" fill="rgb(241,101,52)" rx="2" ry="2" />
<text  x="1048.29" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (494 samples, 0.18%)</title><rect x="159.7" y="293" width="2.2" height="15.0" fill="rgb(248,46,37)" rx="2" ry="2" />
<text  x="162.75" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (36 samples, 0.01%)</title><rect x="1020.5" y="405" width="0.2" height="15.0" fill="rgb(220,7,21)" rx="2" ry="2" />
<text  x="1023.52" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false, false&gt;::_Node_iterator (256 samples, 0.09%)</title><rect x="694.3" y="357" width="1.1" height="15.0" fill="rgb(206,208,4)" rx="2" ry="2" />
<text  x="697.32" y="367.5" ></text>
</g>
<g >
<title>futex_wait (26 samples, 0.01%)</title><rect x="456.5" y="261" width="0.1" height="15.0" fill="rgb(214,195,22)" rx="2" ry="2" />
<text  x="459.51" y="271.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (31 samples, 0.01%)</title><rect x="1188.0" y="549" width="0.1" height="15.0" fill="rgb(217,120,0)" rx="2" ry="2" />
<text  x="1191.02" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (30 samples, 0.01%)</title><rect x="317.1" y="341" width="0.1" height="15.0" fill="rgb(241,150,35)" rx="2" ry="2" />
<text  x="320.12" y="351.5" ></text>
</g>
<g >
<title>task_numa_work (56 samples, 0.02%)</title><rect x="692.5" y="245" width="0.2" height="15.0" fill="rgb(220,200,33)" rx="2" ry="2" />
<text  x="695.47" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (27 samples, 0.01%)</title><rect x="1136.6" y="341" width="0.1" height="15.0" fill="rgb(242,206,2)" rx="2" ry="2" />
<text  x="1139.56" y="351.5" ></text>
</g>
<g >
<title>__do_page_fault (56 samples, 0.02%)</title><rect x="105.4" y="341" width="0.3" height="15.0" fill="rgb(237,103,3)" rx="2" ry="2" />
<text  x="108.43" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long&gt;, true&gt;::_S_cget (24 samples, 0.01%)</title><rect x="800.8" y="277" width="0.1" height="15.0" fill="rgb(231,169,23)" rx="2" ry="2" />
<text  x="803.83" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (544 samples, 0.20%)</title><rect x="1022.9" y="373" width="2.3" height="15.0" fill="rgb(231,80,8)" rx="2" ry="2" />
<text  x="1025.87" y="383.5" ></text>
</g>
<g >
<title>native_send_call_func_ipi (29 samples, 0.01%)</title><rect x="30.5" y="69" width="0.2" height="15.0" fill="rgb(208,88,44)" rx="2" ry="2" />
<text  x="33.54" y="79.5" ></text>
</g>
<g >
<title>pthread_spin_lock (258 samples, 0.09%)</title><rect x="1055.2" y="293" width="1.1" height="15.0" fill="rgb(221,218,48)" rx="2" ry="2" />
<text  x="1058.16" y="303.5" ></text>
</g>
<g >
<title>page_fault (56 samples, 0.02%)</title><rect x="105.4" y="373" width="0.3" height="15.0" fill="rgb(211,227,1)" rx="2" ry="2" />
<text  x="108.43" y="383.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator (31 samples, 0.01%)</title><rect x="35.2" y="405" width="0.1" height="15.0" fill="rgb(225,159,19)" rx="2" ry="2" />
<text  x="38.18" y="415.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (37 samples, 0.01%)</title><rect x="1188.8" y="565" width="0.1" height="15.0" fill="rgb(249,35,17)" rx="2" ry="2" />
<text  x="1191.78" y="575.5" ></text>
</g>
<g >
<title>task_numa_work (102 samples, 0.04%)</title><rect x="211.6" y="197" width="0.4" height="15.0" fill="rgb(250,36,23)" rx="2" ry="2" />
<text  x="214.59" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (189 samples, 0.07%)</title><rect x="760.9" y="309" width="0.8" height="15.0" fill="rgb(236,40,5)" rx="2" ry="2" />
<text  x="763.88" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (56 samples, 0.02%)</title><rect x="264.5" y="309" width="0.2" height="15.0" fill="rgb(235,213,45)" rx="2" ry="2" />
<text  x="267.47" y="319.5" ></text>
</g>
<g >
<title>kv::LRUCache::Evict (13,104 samples, 4.77%)</title><rect x="110.2" y="389" width="56.3" height="15.0" fill="rgb(243,21,39)" rx="2" ry="2" />
<text  x="113.24" y="399.5" >kv::L..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (451 samples, 0.16%)</title><rect x="799.6" y="325" width="1.9" height="15.0" fill="rgb(249,46,26)" rx="2" ry="2" />
<text  x="802.59" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (65 samples, 0.02%)</title><rect x="1130.6" y="357" width="0.3" height="15.0" fill="rgb(208,148,47)" rx="2" ry="2" />
<text  x="1133.60" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (974 samples, 0.35%)</title><rect x="162.1" y="325" width="4.2" height="15.0" fill="rgb(251,86,42)" rx="2" ry="2" />
<text  x="165.15" y="335.5" ></text>
</g>
<g >
<title>tcache_put (61 samples, 0.02%)</title><rect x="41.1" y="405" width="0.3" height="15.0" fill="rgb(237,189,39)" rx="2" ry="2" />
<text  x="44.10" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (68 samples, 0.02%)</title><rect x="1041.2" y="341" width="0.3" height="15.0" fill="rgb(206,150,0)" rx="2" ry="2" />
<text  x="1044.20" y="351.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long const, kv::ListNode*&gt; (38 samples, 0.01%)</title><rect x="1128.6" y="261" width="0.1" height="15.0" fill="rgb(241,58,2)" rx="2" ry="2" />
<text  x="1131.59" y="271.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::store (33 samples, 0.01%)</title><rect x="205.0" y="277" width="0.1" height="15.0" fill="rgb(236,174,46)" rx="2" ry="2" />
<text  x="207.98" y="287.5" ></text>
</g>
<g >
<title>std::mutex::lock (31,910 samples, 11.61%)</title><rect x="320.0" y="373" width="137.0" height="15.0" fill="rgb(233,203,52)" rx="2" ry="2" />
<text  x="322.99" y="383.5" >std::mutex::lock</text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned int, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt; &gt;::find (496 samples, 0.18%)</title><rect x="151.3" y="357" width="2.1" height="15.0" fill="rgb(232,138,43)" rx="2" ry="2" />
<text  x="154.30" y="367.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,268 samples, 0.46%)</title><rect x="1009.3" y="309" width="5.5" height="15.0" fill="rgb(216,137,52)" rx="2" ry="2" />
<text  x="1012.35" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (567 samples, 0.21%)</title><rect x="156.7" y="309" width="2.5" height="15.0" fill="rgb(223,118,45)" rx="2" ry="2" />
<text  x="159.73" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (92 samples, 0.03%)</title><rect x="34.5" y="405" width="0.4" height="15.0" fill="rgb(251,97,50)" rx="2" ry="2" />
<text  x="37.54" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (44,729 samples, 16.28%)</title><rect x="500.6" y="309" width="192.1" height="15.0" fill="rgb(231,181,50)" rx="2" ry="2" />
<text  x="503.64" y="319.5" >entry_SYSCALL_64_after_hw..</text>
</g>
<g >
<title>migrate_misplaced_page (275 samples, 0.10%)</title><rect x="29.6" y="261" width="1.2" height="15.0" fill="rgb(227,72,40)" rx="2" ry="2" />
<text  x="32.60" y="271.5" ></text>
</g>
<g >
<title>std::queue&lt;kv::ListNode*, std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt; &gt;::front (85 samples, 0.03%)</title><rect x="175.3" y="373" width="0.3" height="15.0" fill="rgb(206,42,51)" rx="2" ry="2" />
<text  x="178.28" y="383.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::fetch_add (65 samples, 0.02%)</title><rect x="113.3" y="261" width="0.3" height="15.0" fill="rgb(221,198,40)" rx="2" ry="2" />
<text  x="116.30" y="271.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::dequeue&lt;kv::RDMAConnection*&gt; (92 samples, 0.03%)</title><rect x="1035.2" y="293" width="0.4" height="15.0" fill="rgb(221,76,5)" rx="2" ry="2" />
<text  x="1038.24" y="303.5" ></text>
</g>
<g >
<title>kv::RDMAMemPool::get_rkey (29 samples, 0.01%)</title><rect x="1175.0" y="565" width="0.2" height="15.0" fill="rgb(215,179,53)" rx="2" ry="2" />
<text  x="1178.03" y="575.5" ></text>
</g>
<g >
<title>_int_free (60 samples, 0.02%)</title><rect x="1176.8" y="549" width="0.3" height="15.0" fill="rgb(229,204,52)" rx="2" ry="2" />
<text  x="1179.82" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; (30 samples, 0.01%)</title><rect x="161.9" y="293" width="0.2" height="15.0" fill="rgb(221,203,19)" rx="2" ry="2" />
<text  x="164.92" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (143 samples, 0.05%)</title><rect x="155.8" y="325" width="0.7" height="15.0" fill="rgb(236,33,17)" rx="2" ry="2" />
<text  x="158.84" y="335.5" ></text>
</g>
<g >
<title>mark_wake_futex (391 samples, 0.14%)</title><rect x="1102.5" y="229" width="1.7" height="15.0" fill="rgb(239,102,51)" rx="2" ry="2" />
<text  x="1105.50" y="239.5" ></text>
</g>
<g >
<title>kv::ConnectionManager::remote_write (8,988 samples, 3.27%)</title><rect x="112.1" y="357" width="38.6" height="15.0" fill="rgb(210,84,35)" rx="2" ry="2" />
<text  x="115.12" y="367.5" >kv:..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (116 samples, 0.04%)</title><rect x="1020.0" y="389" width="0.5" height="15.0" fill="rgb(239,64,31)" rx="2" ry="2" />
<text  x="1023.02" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::end (507 samples, 0.18%)</title><rect x="693.2" y="389" width="2.2" height="15.0" fill="rgb(218,160,9)" rx="2" ry="2" />
<text  x="696.24" y="399.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (813 samples, 0.30%)</title><rect x="382.9" y="229" width="3.4" height="15.0" fill="rgb(206,62,14)" rx="2" ry="2" />
<text  x="385.86" y="239.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::fetch_add (112 samples, 0.04%)</title><rect x="114.1" y="277" width="0.5" height="15.0" fill="rgb(226,154,10)" rx="2" ry="2" />
<text  x="117.07" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (10,420 samples, 3.79%)</title><rect x="765.6" y="373" width="44.8" height="15.0" fill="rgb(229,190,39)" rx="2" ry="2" />
<text  x="768.61" y="383.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, unsigned long, false&gt;::_S_equals (463 samples, 0.17%)</title><rect x="312.8" y="293" width="2.0" height="15.0" fill="rgb(250,86,33)" rx="2" ry="2" />
<text  x="315.79" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (267 samples, 0.10%)</title><rect x="1131.8" y="341" width="1.2" height="15.0" fill="rgb(246,188,1)" rx="2" ry="2" />
<text  x="1134.85" y="351.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (129 samples, 0.05%)</title><rect x="30.2" y="133" width="0.5" height="15.0" fill="rgb(224,159,43)" rx="2" ry="2" />
<text  x="33.16" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (34 samples, 0.01%)</title><rect x="1135.6" y="309" width="0.1" height="15.0" fill="rgb(237,205,22)" rx="2" ry="2" />
<text  x="1138.59" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, kv::ListNode*&gt;::pair&lt;unsigned long const&amp;&gt; (143 samples, 0.05%)</title><rect x="808.8" y="309" width="0.6" height="15.0" fill="rgb(248,46,48)" rx="2" ry="2" />
<text  x="811.83" y="319.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (375 samples, 0.14%)</title><rect x="1128.7" y="293" width="1.7" height="15.0" fill="rgb(243,173,0)" rx="2" ry="2" />
<text  x="1131.75" y="303.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (167 samples, 0.06%)</title><rect x="148.8" y="277" width="0.7" height="15.0" fill="rgb(233,42,2)" rx="2" ry="2" />
<text  x="151.81" y="287.5" ></text>
</g>
<g >
<title>__GI___clone (270,326 samples, 98.37%)</title><rect x="10.1" y="565" width="1160.8" height="15.0" fill="rgb(226,164,33)" rx="2" ry="2" />
<text  x="13.13" y="575.5" >__GI___clone</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_v (237 samples, 0.09%)</title><rect x="1179.6" y="549" width="1.0" height="15.0" fill="rgb(229,30,10)" rx="2" ry="2" />
<text  x="1182.58" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (162 samples, 0.06%)</title><rect x="1036.6" y="325" width="0.6" height="15.0" fill="rgb(241,175,10)" rx="2" ry="2" />
<text  x="1039.55" y="335.5" ></text>
</g>
<g >
<title>get_futex_value_locked (62 samples, 0.02%)</title><rect x="451.8" y="229" width="0.3" height="15.0" fill="rgb(238,60,30)" rx="2" ry="2" />
<text  x="454.81" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (389 samples, 0.14%)</title><rect x="799.9" y="309" width="1.6" height="15.0" fill="rgb(226,183,12)" rx="2" ry="2" />
<text  x="802.85" y="319.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (3,016 samples, 1.10%)</title><rect x="190.8" y="309" width="13.0" height="15.0" fill="rgb(236,206,49)" rx="2" ry="2" />
<text  x="193.82" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (66 samples, 0.02%)</title><rect x="1182.4" y="549" width="0.2" height="15.0" fill="rgb(232,15,20)" rx="2" ry="2" />
<text  x="1185.37" y="559.5" ></text>
</g>
<g >
<title>get_futex_value_locked (272 samples, 0.10%)</title><rect x="1083.6" y="213" width="1.2" height="15.0" fill="rgb(242,107,29)" rx="2" ry="2" />
<text  x="1086.64" y="223.5" ></text>
</g>
<g >
<title>pthread_spin_init (130 samples, 0.05%)</title><rect x="248.3" y="293" width="0.6" height="15.0" fill="rgb(219,116,27)" rx="2" ry="2" />
<text  x="251.35" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,378 samples, 0.50%)</title><rect x="1124.6" y="357" width="6.0" height="15.0" fill="rgb(250,156,20)" rx="2" ry="2" />
<text  x="1127.64" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (57 samples, 0.02%)</title><rect x="1188.5" y="565" width="0.3" height="15.0" fill="rgb(220,19,45)" rx="2" ry="2" />
<text  x="1191.53" y="575.5" ></text>
</g>
<g >
<title>std::atomic_thread_fence (27 samples, 0.01%)</title><rect x="114.8" y="277" width="0.1" height="15.0" fill="rgb(226,35,0)" rx="2" ry="2" />
<text  x="117.78" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (495 samples, 0.18%)</title><rect x="315.3" y="357" width="2.1" height="15.0" fill="rgb(254,131,25)" rx="2" ry="2" />
<text  x="318.25" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (86 samples, 0.03%)</title><rect x="1168.7" y="373" width="0.3" height="15.0" fill="rgb(237,116,40)" rx="2" ry="2" />
<text  x="1171.67" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (41 samples, 0.01%)</title><rect x="158.5" y="261" width="0.2" height="15.0" fill="rgb(223,212,14)" rx="2" ry="2" />
<text  x="161.48" y="271.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::get_block_index_entry_for_index (306 samples, 0.11%)</title><rect x="183.4" y="293" width="1.3" height="15.0" fill="rgb(214,115,36)" rx="2" ry="2" />
<text  x="186.39" y="303.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (92 samples, 0.03%)</title><rect x="152.8" y="261" width="0.4" height="15.0" fill="rgb(228,33,34)" rx="2" ry="2" />
<text  x="155.85" y="271.5" ></text>
</g>
<g >
<title>std::mutex::unlock (51 samples, 0.02%)</title><rect x="1189.5" y="565" width="0.2" height="15.0" fill="rgb(251,3,14)" rx="2" ry="2" />
<text  x="1192.52" y="575.5" ></text>
</g>
<g >
<title>rmap_walk_anon (40 samples, 0.01%)</title><rect x="1011.7" y="213" width="0.1" height="15.0" fill="rgb(243,160,23)" rx="2" ry="2" />
<text  x="1014.65" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (175 samples, 0.06%)</title><rect x="1180.6" y="549" width="0.8" height="15.0" fill="rgb(241,58,24)" rx="2" ry="2" />
<text  x="1183.60" y="559.5" ></text>
</g>
<g >
<title>_int_free (46 samples, 0.02%)</title><rect x="161.5" y="245" width="0.2" height="15.0" fill="rgb(247,0,34)" rx="2" ry="2" />
<text  x="164.55" y="255.5" ></text>
</g>
<g >
<title>kv::LRUCache::PushToFront (284 samples, 0.10%)</title><rect x="1043.5" y="389" width="1.2" height="15.0" fill="rgb(226,107,46)" rx="2" ry="2" />
<text  x="1046.47" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock (33 samples, 0.01%)</title><rect x="1009.7" y="293" width="0.1" height="15.0" fill="rgb(253,67,6)" rx="2" ry="2" />
<text  x="1012.65" y="303.5" ></text>
</g>
<g >
<title>__lock_text_start (24,539 samples, 8.93%)</title><rect x="585.7" y="197" width="105.3" height="15.0" fill="rgb(220,108,36)" rx="2" ry="2" />
<text  x="588.66" y="207.5" >__lock_text_..</text>
</g>
<g >
<title>wake_up_q (3,782 samples, 1.38%)</title><rect x="1104.3" y="229" width="16.2" height="15.0" fill="rgb(223,47,29)" rx="2" ry="2" />
<text  x="1107.30" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (213 samples, 0.08%)</title><rect x="308.6" y="341" width="0.9" height="15.0" fill="rgb(232,34,51)" rx="2" ry="2" />
<text  x="311.61" y="351.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (31,391 samples, 11.42%)</title><rect x="322.0" y="341" width="134.8" height="15.0" fill="rgb(236,112,5)" rx="2" ry="2" />
<text  x="324.98" y="351.5" >__GI___pthread_mu..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (173 samples, 0.06%)</title><rect x="760.1" y="309" width="0.8" height="15.0" fill="rgb(219,111,43)" rx="2" ry="2" />
<text  x="763.14" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (44 samples, 0.02%)</title><rect x="1185.9" y="549" width="0.2" height="15.0" fill="rgb(205,211,13)" rx="2" ry="2" />
<text  x="1188.89" y="559.5" ></text>
</g>
<g >
<title>kv::LRUCache::DeleteNode (515 samples, 0.19%)</title><rect x="1032.7" y="389" width="2.2" height="15.0" fill="rgb(211,76,51)" rx="2" ry="2" />
<text  x="1035.69" y="399.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (34 samples, 0.01%)</title><rect x="1189.4" y="549" width="0.1" height="15.0" fill="rgb(240,1,54)" rx="2" ry="2" />
<text  x="1192.37" y="559.5" ></text>
</g>
<g >
<title>mlx5dv_open_device (219 samples, 0.08%)</title><rect x="1056.4" y="309" width="0.9" height="15.0" fill="rgb(240,150,21)" rx="2" ry="2" />
<text  x="1059.36" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (40 samples, 0.01%)</title><rect x="316.7" y="277" width="0.2" height="15.0" fill="rgb(237,20,17)" rx="2" ry="2" />
<text  x="319.72" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt;, false, false&gt;::_Node_iterator (64 samples, 0.02%)</title><rect x="1178.6" y="549" width="0.2" height="15.0" fill="rgb(233,21,18)" rx="2" ry="2" />
<text  x="1181.55" y="559.5" ></text>
</g>
<g >
<title>up_read (36 samples, 0.01%)</title><rect x="1014.8" y="341" width="0.2" height="15.0" fill="rgb(249,161,27)" rx="2" ry="2" />
<text  x="1017.80" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (4,530 samples, 1.65%)</title><rect x="778.7" y="357" width="19.5" height="15.0" fill="rgb(237,9,17)" rx="2" ry="2" />
<text  x="781.70" y="367.5" ></text>
</g>
<g >
<title>__handle_mm_fault (382 samples, 0.14%)</title><rect x="29.2" y="293" width="1.6" height="15.0" fill="rgb(228,93,44)" rx="2" ry="2" />
<text  x="32.21" y="303.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, unsigned long const&amp;&gt; (44 samples, 0.02%)</title><rect x="809.3" y="261" width="0.1" height="15.0" fill="rgb(216,164,17)" rx="2" ry="2" />
<text  x="812.26" y="271.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::dequeue&lt;kv::RDMAConnection*&gt; (1,621 samples, 0.59%)</title><rect x="180.7" y="309" width="7.0" height="15.0" fill="rgb(236,144,47)" rx="2" ry="2" />
<text  x="183.73" y="319.5" ></text>
</g>
<g >
<title>moodycamel::details::circular_less_than&lt;unsigned long&gt; (30 samples, 0.01%)</title><rect x="184.8" y="293" width="0.2" height="15.0" fill="rgb(252,160,8)" rx="2" ry="2" />
<text  x="187.84" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long const, unsigned int&gt;, false, false&gt;::_Node_iterator (51 samples, 0.02%)</title><rect x="315.0" y="341" width="0.2" height="15.0" fill="rgb(215,153,2)" rx="2" ry="2" />
<text  x="317.96" y="351.5" ></text>
</g>
<g >
<title>try_to_unmap_one (152 samples, 0.06%)</title><rect x="30.1" y="181" width="0.6" height="15.0" fill="rgb(238,27,32)" rx="2" ry="2" />
<text  x="33.07" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (207 samples, 0.08%)</title><rect x="797.3" y="309" width="0.9" height="15.0" fill="rgb(235,220,53)" rx="2" ry="2" />
<text  x="800.26" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (340 samples, 0.12%)</title><rect x="739.2" y="309" width="1.5" height="15.0" fill="rgb(244,6,17)" rx="2" ry="2" />
<text  x="742.23" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (30 samples, 0.01%)</title><rect x="1063.7" y="341" width="0.2" height="15.0" fill="rgb(233,105,40)" rx="2" ry="2" />
<text  x="1066.74" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (612 samples, 0.22%)</title><rect x="710.8" y="325" width="2.7" height="15.0" fill="rgb(221,117,23)" rx="2" ry="2" />
<text  x="713.84" y="335.5" ></text>
</g>
<g >
<title>get_futex_key (210 samples, 0.08%)</title><rect x="1101.6" y="229" width="0.9" height="15.0" fill="rgb(245,132,1)" rx="2" ry="2" />
<text  x="1104.56" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, kv::ListNode*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt; &gt;::operator[] (1,532 samples, 0.56%)</title><rect x="1131.0" y="389" width="6.6" height="15.0" fill="rgb(228,12,4)" rx="2" ry="2" />
<text  x="1134.03" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_Tuple_impl (26 samples, 0.01%)</title><rect x="810.2" y="341" width="0.2" height="15.0" fill="rgb(215,164,10)" rx="2" ry="2" />
<text  x="813.25" y="351.5" ></text>
</g>
<g >
<title>checked_request2size (80 samples, 0.03%)</title><rect x="33.0" y="357" width="0.4" height="15.0" fill="rgb(226,224,16)" rx="2" ry="2" />
<text  x="36.03" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (93 samples, 0.03%)</title><rect x="796.9" y="293" width="0.4" height="15.0" fill="rgb(210,97,6)" rx="2" ry="2" />
<text  x="799.86" y="303.5" ></text>
</g>
<g >
<title>_raw_spin_lock (585 samples, 0.21%)</title><rect x="380.3" y="229" width="2.5" height="15.0" fill="rgb(236,71,45)" rx="2" ry="2" />
<text  x="383.30" y="239.5" ></text>
</g>
<g >
<title>kv::RDMAMemPool::get_rkey (820 samples, 0.30%)</title><rect x="150.7" y="373" width="3.5" height="15.0" fill="rgb(206,72,16)" rx="2" ry="2" />
<text  x="153.71" y="383.5" ></text>
</g>
<g >
<title>__handle_mm_fault (29 samples, 0.01%)</title><rect x="105.5" y="293" width="0.2" height="15.0" fill="rgb(232,5,54)" rx="2" ry="2" />
<text  x="108.53" y="303.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::inner_enqueue&lt; (2,139 samples, 0.78%)</title><rect x="204.2" y="325" width="9.2" height="15.0" fill="rgb(207,203,18)" rx="2" ry="2" />
<text  x="207.22" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;kv::ListNode*, std::allocator&lt;kv::ListNode*&gt; &gt;::pop_front (146 samples, 0.05%)</title><rect x="175.7" y="357" width="0.6" height="15.0" fill="rgb(245,38,10)" rx="2" ry="2" />
<text  x="178.68" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (34 samples, 0.01%)</title><rect x="1182.2" y="549" width="0.2" height="15.0" fill="rgb(220,113,52)" rx="2" ry="2" />
<text  x="1185.22" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (59 samples, 0.02%)</title><rect x="164.8" y="277" width="0.3" height="15.0" fill="rgb(246,213,24)" rx="2" ry="2" />
<text  x="167.81" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (36 samples, 0.01%)</title><rect x="1064.8" y="325" width="0.1" height="15.0" fill="rgb(213,60,46)" rx="2" ry="2" />
<text  x="1067.76" y="335.5" ></text>
</g>
<g >
<title>change_protection_range (102 samples, 0.04%)</title><rect x="211.6" y="149" width="0.4" height="15.0" fill="rgb(253,209,5)" rx="2" ry="2" />
<text  x="214.59" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (42 samples, 0.02%)</title><rect x="1185.7" y="549" width="0.2" height="15.0" fill="rgb(227,206,17)" rx="2" ry="2" />
<text  x="1188.70" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned int, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt; &gt;::operator[] (511 samples, 0.19%)</title><rect x="315.2" y="373" width="2.2" height="15.0" fill="rgb(249,83,49)" rx="2" ry="2" />
<text  x="318.18" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (57 samples, 0.02%)</title><rect x="1188.5" y="549" width="0.3" height="15.0" fill="rgb(219,207,35)" rx="2" ry="2" />
<text  x="1191.53" y="559.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (89 samples, 0.03%)</title><rect x="1167.1" y="165" width="0.4" height="15.0" fill="rgb(216,146,42)" rx="2" ry="2" />
<text  x="1170.11" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (858 samples, 0.31%)</title><rect x="798.2" y="357" width="3.6" height="15.0" fill="rgb(253,142,6)" rx="2" ry="2" />
<text  x="801.15" y="367.5" ></text>
</g>
<g >
<title>change_pte_range (113 samples, 0.04%)</title><rect x="1020.0" y="261" width="0.5" height="15.0" fill="rgb(248,167,54)" rx="2" ry="2" />
<text  x="1023.03" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_valptr (63 samples, 0.02%)</title><rect x="1136.8" y="341" width="0.3" height="15.0" fill="rgb(225,217,1)" rx="2" ry="2" />
<text  x="1139.82" y="351.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (86 samples, 0.03%)</title><rect x="307.9" y="373" width="0.4" height="15.0" fill="rgb(244,74,1)" rx="2" ry="2" />
<text  x="310.94" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;::_M_ptr (288 samples, 0.10%)</title><rect x="805.6" y="325" width="1.3" height="15.0" fill="rgb(224,98,11)" rx="2" ry="2" />
<text  x="808.64" y="335.5" ></text>
</g>
<g >
<title>rmap_walk (97 samples, 0.04%)</title><rect x="1167.1" y="229" width="0.4" height="15.0" fill="rgb(226,139,54)" rx="2" ry="2" />
<text  x="1170.08" y="239.5" ></text>
</g>
<g >
<title>try_to_unmap_one (94 samples, 0.03%)</title><rect x="1167.1" y="197" width="0.4" height="15.0" fill="rgb(214,132,5)" rx="2" ry="2" />
<text  x="1170.09" y="207.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (4,676 samples, 1.70%)</title><rect x="1065.5" y="357" width="20.1" height="15.0" fill="rgb(245,31,4)" rx="2" ry="2" />
<text  x="1068.55" y="367.5" ></text>
</g>
<g >
<title>kv::hash_map_t::find (382 samples, 0.14%)</title><rect x="1175.2" y="565" width="1.6" height="15.0" fill="rgb(226,206,14)" rx="2" ry="2" />
<text  x="1178.18" y="575.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (350 samples, 0.13%)</title><rect x="313.3" y="277" width="1.5" height="15.0" fill="rgb(218,35,29)" rx="2" ry="2" />
<text  x="316.28" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, kv::ListNode*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, kv::ListNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (357 samples, 0.13%)</title><rect x="739.2" y="325" width="1.5" height="15.0" fill="rgb(248,115,52)" rx="2" ry="2" />
<text  x="742.16" y="335.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;kv::RDMAConnection*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::get_block_index_entry_for_index (24 samples, 0.01%)</title><rect x="1035.4" y="277" width="0.1" height="15.0" fill="rgb(223,89,41)" rx="2" ry="2" />
<text  x="1038.39" y="287.5" ></text>
</g>
<g >
<title>ibv_poll_cq (1,826 samples, 0.66%)</title><rect x="127.4" y="309" width="7.8" height="15.0" fill="rgb(213,201,36)" rx="2" ry="2" />
<text  x="130.37" y="319.5" ></text>
</g>
</g>
</svg>
